<!DOCTYPE html>
<html>
<head>
    <title>Privacy policy | Restream.io</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" >

            <meta name="description" content="Frequently asked questions">
    

    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@restreamio">
    <meta name="twitter:creator" content="@restreamio">
    <meta name="twitter:title" content="The service for multistreaming | Restream.io">
    <meta name="twitter:description" content="Every streamer can stream games on Youtube, Twitch, UStream, Livestream and many other platforms at the same time.">
    <meta name="twitter:image:src" content="https://restream.io/img/social_networks/restream.png">

    <meta property="og:title" content="Restream.io | The service for multistreaming">
    <meta property="og:description" content="Every streamer can stream games on Youtube, Twitch, UStream, Livestream and many other platforms at the same time.">
    <meta property="og:image" content="https://restream.io/img/social_networks/restream.png" >
    <meta property="og:type" content="product">
    <meta property="og:url" content="https://restream.io/">
    <meta property="og:site_name" content="Restream">
    <meta property="og:email" content="team@restream.io" >

    <!-- Bootstrap core CSS -->
    <link href="/css/faq.bootstrap.min.css" rel="stylesheet">

    <!-- Documentation extras -->
    <link href="/css/faq.min.css" rel="stylesheet">


</head>
<body>
<a id="skippy" class="sr-only sr-only-focusable" href="http://getbootstrap.com/getting-started/#content"><div class="container"><span class="skiplink-text">Skip to main content</span></div></a>
<!-- Docs master nav -->
<header class="navbar navbar-static-top bs-docs-nav" id="top" role="banner">
    <div class="container">
        <div class="navbar-header">
            <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="/" class="navbar-brand">
              <img src="/img/main_landing/restream.svg" alt="Restream Logo" style="height: 100%;">
            </a>
        </div>
        <nav class="collapse navbar-collapse bs-navbar-collapse">
            <ul class="nav navbar-nav">
                <li >
                    <a href="/faq/terms_of_use">Terms of use</a>
                </li>
                <li class="active">
                    <a href="/faq/privacy_policy">Privacy policy</a>
                </li>
                <li>
                    <a target="_blank" href="/away?to=https://support.restream.io">Help Center</a>
                </li>
            </ul>
                          <div class="nav navbar-nav navbar-right">
                <div style="padding-top: 0;">
                  <a href="/login?from=header" class="button button_type_link button_size_small" style="color: #fb5028 !important;height: 50px; line-height: 50px; display: inline-block;">Log in</a>
                  <a href="/signup?from=header" class="button button_type_link button_size_small" style="color: #fb5028 !important; margin-left: 10px;height: 50px; line-height: 50px; display: inline-block;">Sign Up</a>
                </div>
              </div>
                    </nav>
    </div>
</header>

<!-- Docs page layout -->
<div class="bs-docs-header" id="content" tabindex="-1">
    <div class="container">
        <h1>Privacy policy</h1>
        <p>Privacy policy.</p>
    </div>
</div>

<div class="container bs-docs-container">
    <div class="row">
        <div class="col-md-3" role="complementary">
    <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix-top">
        <ul class="nav bs-docs-sidenav">
            <li>
                <a href="#TheInformationRestreamCollects">The Information Restream Collects</a>
            </li>
            <li>
                <a href="#TheWayRestreamUsesInformation">The Way Restream Uses Information</a>
            </li>
            <li>
                <a href="#WhenRestreamDisclosesInformation">When Restream Discloses Information</a>
            </li>
            <li>
                <a href="#YourChoices">Your Choices</a>
            </li>
            <li>
                <a href="#HowRestreamUsesCookies">How Restream Uses Cookies</a>
            </li>
            <li>
                <a href="#DataSecurity">Data Security</a>
            </li>
            <li>
                <a href="#DeleteAccountData">Delete Account Data</a>
            </li>
        </ul>
        <a class="back-to-top" href="#top">
            Back to top
        </a>
    </nav>
</div>
<div class="col-md-9" role="main">
    <div class="bs-docs-section">
        <p class="lead text-justify">
            <strong>Last modified on 21/01/18</strong>
            <br>
            <br>
            Welcome to the web site restream.io, and any other web sites, applications, or services that link to this
            Privacy Policy (collectively, the “Restream Service"), which sites, applications or services are operated
            or produced by Restream, Inc. (“Restream”).
            <br>
            <br>
            Restream values the privacy of the users, publishers and others who visit and use the Restream Service
            (collectively or individually, "You" or "Users") and wants you to be familiar with how we collect, use and
            disclose information from and about you.
            <br>
            <br>
            By agreeing to this Privacy Policy in your Restream account setup, or by using the Restream Service, you
            expressly consent to the information handling practices described in this notice.
            <br>
            <br>
            This Privacy Policy applies to Restream collection and use of your personal information (i.e., information
            that identifies a specific person, such as full name, address, phone number, or email address). It also
            describes generally Restream’s practices for handling non-personal information (for example, interests,
            demographics and services usage).
        </p>
    </div>
    <div class="bs-docs-section">
        <h1 id="TheInformationRestreamCollects" class="page-header">The Information Restream Collects</h1>

        <p class="lead text-justify">
            User-provided Information: You may provide to Restream what is generally called "personal information" in
            the USA and elsewhere or "personal data" in the European Union (such as your name, email address, postal
            mailing address, home/mobile telephone number, credit card number and billing information) if you register
            for a Restream Service, or upload or download certain content or products from the Restream Service, enter
            contests or sweepstakes, or otherwise use the features and functionality of the Restream service.
            <br>
            <br>
            "Automatically Collected" Information: When you access the Restream Service or open one of our HTML emails,
            we may automatically record certain information from your system by using cookies and other types of
            tracking tools. This "automatically collected" information may include Internet Protocol address (" IP
            Address "), a unique user ID, device type, device identifiers, browser types and language, referring and
            exit pages, platform type, version of software installed, system type, the content and pages that you access
            on the Restream, the number of clicks, the amount of time spent on pages, the dates and times that you visit
            the Restream, and other similar information. Depending on the law of your country of residence, your IP
            address may legally be considered personal information.
            <br>
            <br>
            Information from Other Sources: We may obtain information, including personal information, from third
            parties and sources other than the Restream, such as advertisers. We also may obtain information, including
            personal information, from third parties such as social media or social network platforms for which you have
            explicitly connected to the Restream Service (e.g., information from Twitch, Youtube, Smashcast, Mixer, or
            any other platform the Restream Service connects with). When you access the Restream Service through
            social media or social networks you are authorizing Restream to collect, store and use such information and
            content in accordance with this Privacy Policy. We may also obtain information from third parties such as
            social media or social network platforms regarding your use of such services, including information about
            your use of the content you choose to broadcast through the Restream Service. Please refer to privacy policy
            of the social media or social network platforms you use with Restream Service (for example to
            <a target="_blank" href="http://www.google.com/policies/privacy">Google Privacy Policy</a> for YouTube). If
            we combine or associate information from other sources with personal information that we collect through the
            Restream Service, we will treat the combined information as personal information in accordance with this
            Privacy Policy.
        </p>
    </div>
    <div class="bs-docs-section">
        <h1 id="TheWayRestreamUsesInformation" class="page-header">The Way Restream Uses Information</h1>

        <p class="lead text-justify">
            If you submit personally identifiable information to us through the Restream Services, we use your personal
            information to operate, maintain and provide to you the general and personalised features and functionality
            of the Restream Service and to process any flagging activity or correspondence you send to us.
            <br>
            <br>
            We do not use your email address or other personally identifiable information to send commercial or
            marketing messages without your consent or except as part of a specific programme or feature for which you
            will have the ability to opt in or opt out. However, We may use your email address without further consent
            for non-marketing or administrative purposes (such as notifying you of major Restream Service changes or for
            customer service purposes).
            <br>
            <br>
            We use both your personally identifiable information and certain non-personally identifiable information
            (such as anonymous user usage data, cookies, IP addresses, browser type, clickstream data, etc.) to improve
            the quality of the Restream Service and to create new features, promotions, functionality and services by
            storing, tracking, analysing and processing user preferences and trends, as well as user activity and
            communications.
            <br>
            <br>
            To facilitate the Restream Service, we obtain and use the stream channel name and key from each platform
            you have connected to the Restream Service.
            <br>
            <br>
            We may use your connected account's information and applicable permission to perform actions such as, but
            not limited to: "connecting", "subscribing", "following", or "liking" only to or on the official Restream
            accounts associated with your connected social media or social network platform.
            <br>
            <br>
            We use cookies and log file information to: monitor aggregate metrics such as total number of visitors,
            pages viewed, etc.; and (e) track your entries, submissions and status in promotions or other activities.
            <br>
            <br>
            Additional policies. By connecting any account to Restream you agree to privacy policies of the
            corresponding media or social network platform:
            <ul class="bs-docs-section">
            <li class="lead text-justify">
                YouTube - <a href="http://www.google.com/policies/privacy">Google Privacy Policy</a>,
                <a href="https://security.google.com/settings/security/permissions">Revoking access</a>
            </li>
            <li class="lead text-justify">
                Twitch - <a href="https://www.twitch.tv/p/legal/privacy-policy/">Twitch Privacy Policy</a>
            </li>
            <li class="lead text-justify">
                Mixer - <a href="https://mixer.com/about/privacy">Mixer Privacy Policy</a>
            </li>
            <li class="lead text-justify">
                Periscope - <a href="https://www.periscope.com/privacy-policy/">Periscope Privacy Policy</a>
            </li>
            </ul>
            <span class="lead text-justify">The list above is for your reference only, if you cannot find the media or social network platform you have
                connected to Restream in this list, please visit their website for the Terms of use and Privacy Policy.</span>
        </p>

    </div>
    <div class="bs-docs-section">
        <h1 id="WhenRestreamDisclosesInformation" class="page-header">When Restream Discloses Information</h1>

        <p class="lead text-justify">
            Restream does not share your personal information with other organizations for their own marketing or
            promotional uses without your prior express consent.
            <br>
            <br>
            Restream may disclose Automatically Collected and other aggregate non-personal information with interested
            third parties to assist such parties in understanding the usage and demographic patterns for certain
            programs, content, services, advertisements, promotions, or other functionality of Restream.
            <br>
            <br>
            We may disclose both personal and non-personal information to service providers working on our behalf to:
            provide web site hosting, maintenance, and security services; fulfill orders; analyze data and create
            reports; offer certain functionality; and assist Restream in improving the Restream and creating new
            services features. We require that these parties process such information in compliance with this Privacy
            Policy, we authorize them to use the information only for the purposes for which it is provided to them, and
            we require these parties to use reasonable confidentiality measures.
            <br>
            <br>
            Restream may disclose User information if we believe in good faith that such disclosure is necessary to
            comply with US state and federal laws (such as U.S. Copyright law) or other applicable laws around the world
            (for example, in the country of your residence); or respond to a court order, judicial or other government
            subpoena, or warrant in the manner legally required by the requesting entity.
            <br>
            <br>
            Restream also reserves the right to disclose User information that we believe, in good faith and after
            making reasonable inquiries, is appropriate or necessary to take precautions against liability to Restream;
            protect Restream from abusive, fraudulent, or unlawful uses; to investigate and defend ourselves against
            third-party claims or allegations to protect the security or integrity of the Restream Service; or to
            protect the rights, property, or personal safety of Restream, our Users, or others. We will notify you of
            these disclosures if we reasonably think we can do so legally and without harming the purpose of the
            disclosure.
        </p>

    </div>
    <div class="bs-docs-section">
        <h1 id="YourChoices" class="page-header">Your Choices</h1>

        <p class="lead text-justify">
            You may, of course, refuse to submit personally identifiable information through Restream service.
            <br>
            <br>
            However Restream features may, for authentication purposes, require you to sign up. The privacy notices of
            those services govern the use of your personal information associated with them.
            <br>
            <br>
            You may update or correct your personal profile information and email preferences at any time by visiting
            your account profile page.
        </p>

    </div>
    <div class="bs-docs-section">
        <h1 id="HowRestreamUsesCookies" class="page-header">How Restream Uses Cookies</h1>

        <p class="lead text-justify">
            Like many other sites on the Internet, Restream uses cookies—small text files containing a string of
            alphanumeric characters. Restream uses cookies and collects IP addresses and other automatically collected
            information in order to better facilitate the services provided to you, and to collect non-personal
            aggregate data for marketing and research purposes. If you accept the cookies used on our site, we may be
            able to identify your system by reading the cookie stored on your system, but we will not be able to
            identify you unless you’ve entered your personal information.
            <br>
            <br>
            We may also allow third-party companies to serve ads and/or collect certain anonymous information from you
            when you visit our website or use our services.
        </p>
    </div>
    <div class="bs-docs-section">
        <h1 id="DataSecurity" class="page-header">Data Security</h1>

        <p class="lead text-justify">
            Restream has strict security measures in place to protect the loss, misuse, and alteration of information
            under our control. We use secure technology, privacy protection controls, and restrictions on employee
            access in order to safeguard your information. While we take precautions to protect sensitive information
            that’s transmitted online, we also protect your information offline. Only employees who need the
            information to perform a specific job, such as billing or customer service, are granted access to
            personally identifiable information. The computers/serves in which we store personally identifiable
            information are kept in a secure environment.
            <br>
            <br>
            Please note that while we continually make every effort to implement safeguards to protect your personal
            information, the very nature of the Internet makes it impossible to guarantee the security of transmitted
            data. Restream makes no warranties or representations as to the security and confidentiality of any data
            you transmit. Any data you transmit to Restream is at your own risk, and we cannot guarantee that
            information may not be accessed, disclosed, altered, or destroyed by any breach of our physical, technical,
            or managerial safeguards.
        </p>

    </div>
    <div class="bs-docs-section">
        <h1 id="DeleteAccountData" class="page-header">Delete Account Data</h1>

        <p class="lead text-justify">
            If you would like to delete all data associated with your account, mail us with request on team@restream.io.
            This action is irreversible.
        </p>
    </div>
</div>
    </div>
</div>

<!-- Footer
================================================== -->
<footer class="bs-docs-footer" role="contentinfo">
    <div class="container">
        <div class="row">
            <div class="col-xs-12 text-center">
                <p>
                    SUPPORT & IDEAS: <a href="mailto:team@restream.io">TEAM@RESTREAM.IO</a>
                </p>
                <p>MADE WITH <i class="glyphicon glyphicon-heart"></i> FOR STREAMERS</p>
            </div>
        </div>
    </div>
</footer>

<script src="/js/libraries/thirdparty/jquery-1.11.1.min.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>

<script src="/js/old_browsers.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>
<script src="/js/libraries/thirdparty/bootstrap.min.js"></script>
<script src="/js/libraries/translation.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>
<script src="/js/language/english.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>

    <script src="https://cdn.ravenjs.com/3.26.2/raven.min.js" crossorigin="anonymous"></script>

    <script>
        if (
            location.origin === 'https://restream.io' &&
            'fetch' in window &&
            'WebAssembly' in window
        ) {
            Raven.config('https://f7f8fb87dfe34246ae9cd9b0df877d6e@sentry.io/1239364', {
                release: 'db9e6eef2eb4f0d8c55ecc7beaf2d78d',
                whitelistUrls: [
                    /https?:\/\/(www\.)?restream\.io/
                ]
            }).install();

                    }
    </script>
<link rel="stylesheet" type="text/css"
      href="/css/cconsent.min.css?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d">
<link rel="stylesheet" type="text/css"
      href="/css/cconsent_custom.css?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d">
<script
    src="/js/compliance/cconsent.min.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>
<script
    src="/js/libraries/restreamEventT.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>

<script>
    (function () {
        var cdebug =              false;
        
        function cLog() {
            if (cdebug) {
                console.log.apply(null, arguments);
            }
        }
        function cErr() {
            if (cdebug) {
                console.error.apply(null, arguments);
            }
        }
        /**
         * Cookie helpers
         *
         * @type {{setCookie: util.setCookie, clearCookie: util.clearCookie}}
         */
        var util = {
            deepExtend: function (target, source) {
                for (var prop in source) {
                    if (source.hasOwnProperty(prop)) {
                        if (prop in target && this.isPlainObject(target[prop]) &&
                            this.isPlainObject(source[prop])) {
                            this.deepExtend(target[prop], source[prop]);
                        } else {
                            target[prop] = source[prop];
                        }
                    }
                }
                return target;
            },
            isPlainObject: function (obj) {
                // The code "typeof obj === 'object' && obj !== null" allows Array objects
                return typeof obj === 'object' && obj !== null && obj.constructor == Object;
            },
            clearCookiesLike: function (regex) {
                var cs = document.cookie.split(/;\s*/);
                cs.forEach(function (cookie) {
                    if ((m = regex.exec(cookie)) !== null) {
                        // The result can be accessed through the `m`-variable.
                        util.clearCookie(m[0].split('=')[0]);
                    }
                });
            },
            clearLocalStorageLike: function (regex) {
                Object.keys(localStorage).forEach(function (key) {
                    if (regex.exec(key) !== null) {
                        util.clearLocal(key);
                    }
                });
            },
            existsCookie: function (name) {
                if (document.cookie.split(';').filter(function (item) {
                    return item.indexOf(name + '=') >= 0
                }).length) {
                    return true;
                }
                return false;
            },
            getCookie: function (name) {
                var value = '; ' + document.cookie;
                var parts = value.split('; ' + name + '=');
                return parts.length != 2 ? undefined : parts.pop().split(';').shift();
            },
            getStatusCookie: function (name) {
                var value = '; ' + document.cookie;
                var parts = value.split('; ' + name + '=');
                if (parts.length !== 2) {
                    return undefined;
                }

                var rawValue = parts.pop().split(';').shift();

                var cookieObj = JSON.parse(rawValue);

                if (Object.keys(cookieObj).length !== 1) {
                    return undefined;
                }
                var status = Object.keys(cookieObj).shift();
                var createdAt = cookieObj[status]; // Extract assignment
                return status;
            },
            setCookie: function (name, value, expiryDays, domain, path) {
                var exdate = new Date();
                exdate.setDate(exdate.getDate() + (expiryDays || 365));

                var cookie = [
                    name + '=' + (value ? value : ''),
                    'expires=' + exdate.toUTCString(),
                    'path=' + (path || '/'),

                                        'secure'
                                    ];

                if (domain) {
                    cookie.push('domain=' + domain);
                } else {
                    cookie.push('domain=' + util.getTLD());
                }
                document.cookie = cookie.join(';');

            }, // Clear a cookie by string name
            clearCookie: function (name) {
                name = decodeURIComponent(name);
                var fullDomain = window.location.hostname;
                var topLevelDomain = fullDomain.split('.').slice(-2).join('.');

                // Skip if cookie doesn't exist to avoid writes.
                if (!util.existsCookie(name)) {
                    return;
                }
                // Some could be set on subdomains or strict domains. Attempt to nullify all.
                util.setCookie(name, null, -1, '.' + fullDomain, '/');
                util.setCookie(name, null, -1, null, '/');

                if (fullDomain !== topLevelDomain) {
                    util.setCookie(name, null, -1, topLevelDomain, '/');
                }

            },
            clearLocal: function (name) {
                localStorage.removeItem(name);
            },
            getTLD: function () {
                return window.location.hostname.split('.').slice(-2).join('.');
            },
            hasConsented: function () {
                return 'allow' === util.getStatusCookie('cookieconsent_status');
            }
        };

        // Holder for auto loading all scripts
        var scriptArr = [];

        // Keeps track of loaded state to prevent loading multiple times.
        var isLoaded = {};

        // Countries in EU https://gist.github.com/henrik/1688572
        var EU = [
            'AT',
            'BE',
            'BG',
            'HR',
            'CY',
            'CZ',
            'DK',
            'EE',
            'ES',
            'FI',
            'FR',
            'DE',
            'GR',
            'HU',
            'IE',
            'IT',
            'LV',
            'LT',
            'LU',
            'MT',
            'NL',
            'PL',
            'PT',
            'RO',
            'SK',
            'SI',
            'SE',
            'GB'
        ];

        // Map keys to strings.
        var categories = {
            necessary: "Necessary",
            statistics: "Statistics",
            marketing: "Marketing"
        };

        var authenticationObj = {
            name: 'Authentication',
            category: categories.necessary,
            load: function () {
                cLog('Loading Authentication...');
            },
            clear: function () {
            },
            optIn: function () {
            },
            optOut: function () {
            }
        };

        var googleReCaptchaObj = {
            name: 'Google reCaptcha',
            category: categories.necessary,
            load: function () {
                cLog('Loading Google reCaptcha...');
            },
            clear: function () {
            },
            optIn: function () {
            },
            optOut: function () {
            }
        };

        var stripeObj = {
            name: 'Stripe',
            category: categories.necessary,
            load: function () {
                cLog('Loading Stripe...');
            },
            clear: function () {
            },
            optIn: function () {
            },
            optOut: function () {
            }
        };

        var facebookObj = {
            name: 'Facebook',
            category: categories.statistics,
            load: function () {
                cLog('Loading Facebook...');
                                if (isLoaded.fb) {
                    cLog('Facebook already loaded!');
                    return;
                }

                isLoaded.fb = false;
                            },
            clear: function () {
                // Clear cookies if any
            },
            optIn: function () {
                if (!isLoaded.fb) {
                                        !function (f, b, e, v, n, t, s) {
                        if (f.fbq) {
                            return;
                        }
                        n = f.fbq = function () {
                            n.callMethod ? n.callMethod.apply(n, arguments) :
                            n.queue.push(arguments)
                        };
                        if (!f._fbq) {
                            f._fbq = n;
                        }
                        n.push = n;
                        n.loaded = !0;
                        n.version = '2.0';
                        n.queue = [];
                        t = b.createElement(e);
                        t.async = !0;
                        t.src = v;
                        s = b.getElementsByTagName(e)[0];
                        s.parentNode.insertBefore(t, s)
                    }(window, document, 'script', 'https://connect.facebook.net/en_US/fbevents.js');
                                        isLoaded.fb = true;

                }
                // Allow tracking
                                if (fbq) {
                    // Enable pushState() listener from auto sending data
                    fbq.disablePushState = false;
                    // // Opt-in
                    fbq('consent', 'grant');
                    // // Enable MicroData & SubscribedButtonClick events
                    // // http://randomproblems.com/subscribedbuttonclick-microdata-events-can-disable-facebook-pixel-autoconfig-feature/
                    fbq('set', 'autoConfig', true, '959389167523322');
                    // init should only be called 1 time no matter what.
                    fbq('init', '959389167523322');
                    // Track the PageView, but this will not fire until consent is given
                    fbq('track', 'PageView');
                }
                
            },
            optOut: function () {
                if (!isLoaded.fb) {
                    return;
                }
                // Disable tracking
                if (window.fbq) {
                    window.fbq.disablePushState = true;
                    window.fbq('consent', 'revoke');
                    window.fbq('set', 'autoConfig', false, '959389167523322');
                }
            }
        };

        var googleAnalyticsObj = {
            name: 'Google Analytics',
            category: categories.statistics,
            load: function () {
                cLog('Loading Google Analytics...');

                                // Default opt-out
                window['ga-disable-UA-34755253-2'] = true;

                if (isLoaded.ga) {
                    cLog('Google Analytics already loaded!');
                    return;
                }

                isLoaded.ga = false;
                            },
            clear: function () {
                util.clearCookiesLike(/(_g.*?)=/);
                // util.clearCookie('_ga');
                // util.clearCookie('_gat');
                // util.clearCookie('_gid');
            },
            optIn: function () {
                // Opt-in
                window['ga-disable-UA-34755253-2'] = false;

                if (!isLoaded.ga) {
                    
                    (function (i, s, o, g, r, a, m) {
                        i['GoogleAnalyticsObject'] = r;
                        i[r] = i[r] || function () {
                            (i[r].q = i[r].q || []).push(arguments)
                        }, i[r].l = 1 * new Date();
                        a = s.createElement(o), m = s.getElementsByTagName(o)[0];
                        a.async = 1;
                        a.src = g;
                        m.parentNode.insertBefore(a, m)
                    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js',
                        'ga');
                    isLoaded.ga = true;
                    
                }

                                ga('create', 'UA-34755253-2', 'auto');
                ga('set', 'anonymizeIp', true);
                ga('send', 'pageview');
                            },
            optOut: function () {
                if (!isLoaded.ga) {
                    return;
                }
                // Disable tracking
                window['ga-disable-UA-34755253-2'] = true;
            }
        };

        // TODO: Always need to update this part of the script if we add more scripts to GTM
        var googleTagManagerObj = {
            name: 'Google Tag Manager, Google Analytics',
            category: categories.statistics,
            load: function () {
                cLog('Loading Google Tag Manager...');

                                /**
                 * Google Analytics - default optOut
                 */
                window['ga-disable-UA-34755253-2'] = true;

                (function (w, d, s, l, i) {
                    w[l] = w[l] || [];
                    w[l].push({
                        'gtm.start': new Date().getTime(),
                        event: 'gtm.js'
                    });
                    var f = d.getElementsByTagName(s)[0], j = d.createElement(s),
                        dl = l != 'dataLayer' ? '&l=' + l : '';
                    j.async = true;
                    j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
                    f.parentNode.insertBefore(j, f);
                })(window, document, 'script', 'dataLayer', 'GTM-5Z76P4W');
                                isLoaded.gtm = true;
            },
            clear: function () {
                // Update this function for each managed script inside GTM
                /**
                 * Google Analytics
                 */
                util.clearCookiesLike(/(_g.*?)=/);
            },
            optIn: function () {
                // Allow tracking
                /**
                 * Google Analytics - optIn. Needs to be declared before the script loads
                 */
                window['ga-disable-UA-34755253-2'] = false;

                if (!isLoaded.gtm) {
                    return;
                }

                cLog('window.ga exists?')
                if (window.ga) {
                    cLog('window.ga exists!')
                    window.ga('create', 'UA-34755253-2', 'auto');
                    window.ga('set', 'anonymizeIp', true);
                    window.ga('send', 'pageview');
                }
            },
            optOut: function () {
                if (!isLoaded.gtm) {
                    return;
                }
                // Disable tracking
                /**
                 * Google Analytics - optOut
                 */
                window['ga-disable-UA-34755253-2'] = true;
            }
        };

        var bingObj = {
            name: 'Bing Analytics',
            category: categories.statistics,
            load: function () {
                cLog('Loading Bing...');
                isLoaded.bing = true;
            },
            clear: function () {
                util.clearCookiesLike(/(MR.*?)=/);
                util.clearCookiesLike(/(MUIDB.*?)=/);
            },
            optIn: function () {
                if (!isLoaded.bing) {
                    return;
                }
                // If we are already loaded, return.
                if (window.uetq) {
                    return;
                }
                // Allow tracking
                                (function (w, d, t, r, u) {
                    var f, n, i;
                    w[u] = w[u] || [], f = function () {
                        if (typeof UET === 'undefined') return;
                        var o = {
                            ti: "25021568"
                        };
                        o.q = w[u], w[u] = new UET(o), w[u].push("pageLoad")
                    }, n = d.createElement(t), n.src = r, n.async = 1, n.onload = n.onreadystatechange = function () {
                        var s = this.readyState;
                        s && s !== "loaded" && s !== "complete" || (f(), n.onload = n.onreadystatechange = null)
                    }, i = d.getElementsByTagName(t)[0], i.parentNode.insertBefore(n, i)
                })(window, document, "script", "//bat.bing.com/bat.js", "uetq");
                
            },
            optOut: function () {
                if (!isLoaded.bing) {
                    return;
                }
                // Disable tracking
                if (window.uetq) {
                    window.uetq = null;
                }
            }
        };

        var linkedinObj = {
            name: 'Linkedin Analytics',
            category: categories.statistics,
            load: function () {
                cLog('Loading Linkedin...');
                isLoaded.linkedin = true;
            },
            clear: function () {
                // util.clearCookiesLike(/(MR.*?)=/);
                // util.clearCookiesLike(/(MUIDB.*?)=/);
            },
            optIn: function () {
                if (!isLoaded.linkedin) {
                    return;
                }
                // Allow tracking
                                    window._linkedin_data_partner_ids = ["507401"];
                    (function(){var s = document.getElementsByTagName("script")[0];
                        var b = document.createElement("script");
                        b.type = "text/javascript";b.async = true;
                        b.src = "https://snap.licdn.com/li.lms-analytics/insight.min.js";
                        s.parentNode.insertBefore(b, s);})();
                
            },
            optOut: function () {
            }
        };
        var redditObj = {
            name: 'Reddit Analytics',
            category: categories.statistics,
            load: function () {
                cLog('Loading Linkedin...');
                isLoaded.reddit = true;
            },
            clear: function () {
                // util.clearCookiesLike(/(MR.*?)=/);
                // util.clearCookiesLike(/(MUIDB.*?)=/);
            },
            optIn: function () {
                if (!isLoaded.reddit) {
                    return;
                }
                // Allow tracking
                                    (new Image()).src="https://alb.reddit.com/snoo.gif?q=CAAHAAABAAoACQAAAAAEU2UvAA==&s=U2JGVuixAzzM2ExDjkP3oydsjSdmhHpu5dpMyCVY8lE=&ts="+Date.now();
                
            },
            optOut: function () {
            }
        };

        var intercomObj = {
            name: 'Intercom',
            category: categories.necessary,
            load: function () {
                cLog('Loading Intercom...');
                                if (isLoaded.ic) {
                    cLog('Intercom already loaded!');
                    return;
                }

                (function () {
                    var w = window;
                    var ic = w.Intercom;
                    if (typeof ic === "function") {
                        ic('reattach_activator');
                        ic('update', intercomSettings);
                    } else {
                        var d = document;
                        var i = function () {
                            i.c(arguments)
                        };
                        i.q = [];
                        i.c = function (args) {
                            i.q.push(args)
                        };
                        w.Intercom = i;

                        function l() {
                            var s = d.createElement('script');
                            s.type = 'text/javascript';
                            s.async = true;
                            s.src = 'https://widget.intercom.io/widget/wvwee5xi';
                            var x = d.getElementsByTagName('script')[0];
                            x.parentNode.insertBefore(s, x);
                        }

                        if (w.attachEvent) {
                            w.attachEvent('onload', l);
                        } else {
                            w.addEventListener('load', l, false);
                        }
                    }
                })();

                isLoaded.ic = true;
                            },
            clear: function () {
                util.clearCookiesLike(/(intercom.*?)=/);
                // util.clearCookie('intercom-id-wvwee5xi');
            },
            optIn: function () {
                if (!isLoaded.ic) {
                    return;
                }
                // Allow tracking
                if (window.Intercom) {
                                        window.Intercom('boot', {
                        app_id: 'wvwee5xi'
                    });
                                    }
            },
            optOut: function () {
                if (!isLoaded.ic) {
                    return;
                }
                // Disable tracking
                if (window.Intercom) {
                    window.Intercom('shutdown');
                }
            }
        };

        var amplitudeObj = {
            name: 'Amplitude',
            category: categories.statistics,
            load: function () {
                cLog('Loading Amplitude...');
                if (isLoaded.at) {
                    cLog('Amplitude already loaded!');
                    return;
                }

                // Hack to remove previous instance. Amplitude has errors otherwise.
                if (window.amplitude) {
                    window.amplitude = null;
                }

                
                (function(e,t){var n=e.amplitude||{_q:[],_iq:{}};var r=t.createElement("script")
                ;r.type="text/javascript";r.async=true
                ;r.src="https://cdn.amplitude.com/libs/amplitude-4.2.1-min.gz.js"
                ;r.onload=function(){if(e.amplitude.runQueuedFunctions){
                    e.amplitude.runQueuedFunctions()}else{
                    console.log("[Amplitude] Error: could not load SDK")}}
                ;var i=t.getElementsByTagName("script")[0];i.parentNode.insertBefore(r,i)
                ;function s(e,t){e.prototype[t]=function(){
                    this._q.push([t].concat(Array.prototype.slice.call(arguments,0)));return this}}
                    var o=function(){this._q=[];return this}
                    ;var a=["add","append","clearAll","prepend","set","setOnce","unset"]
                    ;for(var u=0;u<a.length;u++){s(o,a[u])}n.Identify=o;var c=function(){this._q=[]
                        ;return this}
                    ;var l=["setProductId","setQuantity","setPrice","setRevenueType","setEventProperties"]
                    ;for(var p=0;p<l.length;p++){s(c,l[p])}n.Revenue=c
                    ;var d=["init","logEvent","logRevenue","setUserId","setUserProperties","setOptOut","setVersionName","setDomain","setDeviceId","setGlobalUserProperties","identify","clearUserProperties","setGroup","logRevenueV2","regenerateDeviceId","logEventWithTimestamp","logEventWithGroups","setSessionId","resetSessionId"]
                    ;function v(e){function t(t){e[t]=function(){
                        e._q.push([t].concat(Array.prototype.slice.call(arguments,0)))}}
                        for(var n=0;n<d.length;n++){t(d[n])}}v(n);n.getInstance=function(e){
                        e=(!e||e.length===0?"$default_instance":e).toLowerCase()
                        ;if(!n._iq.hasOwnProperty(e)){n._iq[e]={_q:[]};v(n._iq[e])}return n._iq[e]}
                    ;e.amplitude=n})(window,document);

                
                if (location.hash === '#logout') {
                    this.clear();
                    history.pushState('', document.title, window.location.pathname + location.search);
                }

                amplitude.getInstance().init(
                    "e258424697a5d32c6e7d47ce778fb7a2",
                    null,
                    { includeGclid: true, includeUtm: true, saveEvents: true , includeReferrer: true }
                );
                
                isLoaded.at = true;
            },
            clear: function () {
                util.clearCookiesLike(/amplitude_.+/);
                util.clearLocalStorageLike(/amplitude_.+/);
            },
            optIn: function () {
                if (!isLoaded.at) {
                    return;
                }
                // Allow tracking
                if (window.amplitude && window.amplitude.getInstance() &&  window.amplitude.getInstance().logEvent) {
                    window.amplitude.getInstance().setOptOut(false);
                    // window.amplitude.getInstance().logEvent('user_opted_in');
                }
            },
            optOut: function () {
                if (!isLoaded.at) {
                    return;
                }
                // Disable tracking
                if (window.amplitude && window.amplitude.getInstance() &&
                    window.amplitude.getInstance().logEvent && window.amplitude.getInstance().setOptOut) {
                    window.amplitude.getInstance().logEvent('user_opted_out');
                    window.amplitude.getInstance().setOptOut(true);
                }
            }
        };

        var fullstoryObj = {
            name: 'Fullstory',
            category: categories.statistics,
            load: function () {
                cLog('Loading Fullstory...');
                                if (isLoaded.fs) {
                    cLog('Fullstory already loaded!');
                    return;
                }
                /**
                 * Fullstory likes to load asynchronously and we cannot stop the recording since the
                 * shutdown() method is idempotent. Aka, it will do nothing until the FS script has
                 * loaded. So instead, we will initialize fs every optIn.
                 */
                isLoaded.fs = false;
                            },
            clear: function () {
                // clear cookies if any
                util.clearCookiesLike(/(fs_.*?)=/);
                // util.clearCookie('fs_uid');
            },
            optIn: function () {
                if (!isLoaded.fs) {
                                                                                isLoaded.fs = true;
                }

                if (window.FS && window.FS.restart) {
                    window.FS.restart();
                }
            },
            optOut: function () {
                if (!isLoaded.fs) {
                    return;
                }
                if (window.FS && window.FS.shutdown) {
                    window.FS.shutdown();
                }
            }
        };

        /**
         * Dynamically load the analytics scripts depending on user consent.
         */
        function loadAnalytics(UIData) {
            cLog('Loading all scripts...');

            // GTM scripts override loaded ones, so remove duplicates.
            var dupes = [];
            scriptArr.forEach(function (script) {
                // Find only GTM script and parse the name
                if (~script.name.indexOf('Google Tag Manager')) {
                    dupes = script.name.split(', ');
                    dupes.shift(); // Don't need the first element
                }
            });
            scriptArr = scriptArr.filter(function (script) {
                return (dupes.indexOf(script.name) === -1)
            });

            scriptArr.forEach(function (script) {
                script.load();
                // Auto optIn necessary scripts.
                if (script.category === categories.necessary) {
                    script.optIn();
                }

                // Load into UI data structure.
                var lower = script.category.replace(/^\w/, function (chr) {
                    return chr.toLowerCase();
                });

                if (UIData[lower]) {
                    UIData[lower].scripts.push(script);
                }
            })
        }

        function optInAll() {
            scriptArr.forEach(function (script) {
                // Don't load the necessary scripts twice.
                if (script.category !== categories.necessary) {
                    cLog('Opting in script:', script.name);
                    script.optIn();
                }
            })
        }

        /**
         * Get a the preference cookie
         *
         * @returns {Object} | null
         */
        function getPreferences() {
            var cookie = util.getCookie('consentPrefs');

            if (!cookie) {
                return null;
            }

            try {
                return JSON.parse(cookie);
            } catch (err) {
                cErr('Could not getPreferences!', err);
                return null;
            }
        }

        /**
         *  Set a cookie to hold the user's preferences.
         *
         *  @returns {Boolean} - false if failed.
         */
        function setPreferences(prefs) {

            var safePrefs = null;

            if (typeof prefs === 'string') {
                try {
                    safePrefs = prefs;
                    util.setCookie('consentPrefs', safePrefs, null, null, null);
                    return true;
                } catch (err) {
                    cErr('Could not setPreferences!', err);
                    return false;
                }
            }

            if (util.isPlainObject(prefs)) {
                safePrefs = JSON.stringify(prefs);
                util.setCookie('consentPrefs', safePrefs, null, null, null);
                return true;
            }

            return false;
        }

        /**
         * Opt-in via the cookie settings page
         */
        function optIn() {
            cLog('Opting in analytics...');
            var consentPrefs = readConsentSwitches();

            // If the consent Settings was not loaded, reading the switches wont work. Try reading
            // from preferences cookie.

            // if (!util.isPlainObject(consentPrefs) ||
            //     Object.keys(consentPrefs).length === 0) {
            //     tryPrefs = getPreferences();
            //     if (tryPrefs && Object.keys(tryPrefs).length > 0) {
            //         consentPrefs = tryPrefs;
            //     }
            // }

            // Otherwise, default opt-in for all that don't process PII and save the new cookie.
            if (!util.isPlainObject(consentPrefs) || Object.keys(consentPrefs).length === 0) {
                scriptArr.forEach(function (item) {
                    consentPrefs[item.category] = true;
                });

                // Here, we are exclusively setting 'Marketing' to false because it would use PII
                // (even though we don't currently use it).
                var upper = categories.marketing.replace(/^\w/, function (chr) {
                    return chr.toUpperCase();
                });
                consentPrefs[upper] = false;
            }

            // Set consentPref cookie
            if (!setPreferences(consentPrefs)) {
                cErr('Failed to set preferences!');
                return;
            }

            // Only optIn for preferences that have been enabled.
            Object.keys(consentPrefs).forEach(function (item) {
                scriptArr.forEach(function (script) {
                    // Don't load the necessary scripts twice.
                    if (consentPrefs[item] === true) {
                        if (script.category === item &&
                            (script.category !== categories.necessary)) {
                            cLog('Opting in script:', script.name);
                            script.optIn();
                        }
                    }
                })
            });
        }

        function setPreferencesDecline() {
            var consentPrefs = {};

            Object.keys(categories).forEach(function (category) {

                var upper = category.replace(/^\w/, function (chr) {
                    return chr.toUpperCase();
                });

                if (upper === categories.necessary) {
                    consentPrefs[upper] = true;
                } else {
                    consentPrefs[upper] = false;
                }
            });

            setPreferences(consentPrefs);
        }

        /**
         * Opt-in via the preferences cookie data
         */
        function optInPrefs() {
            cLog('Opting in analytics...');
            // If called from onInitialise (before script has initialized), we need to read a cookie
            // for the user's already consented values and not the form switches.

            var consentPrefs = getPreferences();

            if (!consentPrefs || !util.isPlainObject(consentPrefs)) {
                cErr(';consentPrefs invalid format. Must be an Object. Clearing all consent data.');
                util.clearCookiesLike(/(cookieconsent_status.*?)=/);
                util.clearCookiesLike(/(consentPrefs.*?)=/);
                return;
            }

            // Iterate through the enabled preferences
            Object.keys(consentPrefs).forEach(function (item) {
                if (consentPrefs[item] === true) {
                    scriptArr.forEach(function (script) {
                        // Don't load the necessary scripts twice.
                        if (script.category === item &&
                            (script.category !== categories.necessary)) {
                            cLog('Opting in script:', script.name);
                            script.optIn();
                        }
                    })
                }
            });
        }

        /**
         * Dynamically opt-out.
         */
        function optOut() {
            cLog('Opting out of scripts...');
            scriptArr.forEach(function (script) {
                // Don't optOut of necessary scripts.
                if (script.category !== categories.necessary) {
                    script.optOut();
                    script.clear();
                }
            });
        }

        /**
         * Inject all known scripts here.
         */
        scriptArr.push(authenticationObj);
        scriptArr.push(googleReCaptchaObj);
        scriptArr.push(intercomObj);
        scriptArr.push(stripeObj);
        // scriptArr.push(googleTagManagerObj);
        scriptArr.push(bingObj);
        scriptArr.push(linkedinObj);
        scriptArr.push(redditObj);
        scriptArr.push(googleAnalyticsObj);
        scriptArr.push(facebookObj);
        scriptArr.push(fullstoryObj);
        scriptArr.push(amplitudeObj);

        var UIData = {
            necessary: {
                name: categories.necessary,
                enabled: true,
                description: "Necessary cookies help make our website usable by enabling basic functions such as accessing secure areas of the website, allowing us to provide efficient and contextual customer support, and providing a secure payment gateway. These cookies cannot be switched off in our systems.",
                scripts: []
            },
            statistics: {
                name: categories.statistics,
                enabled: true,
                description: "Statistics cookies help us understand how visitors interact with our website by collecting and reporting information anonymously. If you do not allow these cookies, we will not know when you have visited our site.",
                scripts: []
            },
            marketing: {
                name: categories.marketing,
                enabled: true,
                description: "Marketing cookies are used to track visitors across websites. The intention is to display ads that are relevant and engaging for the individual. By not allowing these cookies, you won't see any reduction in ads served, but probably less relevant ads across different websites.",
                scripts: []
            }
        };

        // Load all analytic scripts (default opt-out)
        loadAnalytics(UIData);

        function submitConsent() {
            $.ajax({
                url: '/api/consent/confirm',
                type: 'POST',
                dataType: 'json',
                xhrFields: {
                    withCredentials: true
                },
                data: {},
                success: function (res) {
                    cLog(res);
                },
                error: function (err) {
                    cErr(err);
                }
            });
        }

        function createSettingBlock(settings) {
            var cookieconsentBlock = $('div[aria-label="cookieconsent"]');
            cookieconsentBlock.addClass('cookieconsent-settings');

            var html = '';
            var title = '';
            var description = '';
            var switcher = '';
            var index = 0;

            var prefs = getPreferences();

            Object.values(UIData).forEach(function (category) {
                // If we didn't have a prefs cookie, check all boxes that don't process personal data
                if (!prefs || !util.isPlainObject(prefs)) {
                    switcher = [
                        '<div class="block-interval-switch__checkbox">' +
                        '                        <div class="switcher ' +
                        (category.name === categories.necessary ? ' switcher_disabled' : '') +
                        '">' + '                            <label class="switcher-label">' +
                        '                                <input class="switcher-checkbox jsCookieSettingSwitcher" type="checkbox" data-name="' +
                        category.name + '" ' +
                        (category.name === categories.necessary ? 'disabled=true checked' :
                         (category.name !== categories.marketing ? 'checked' : '')) + '>' +
                        '                                <div class="switcher-circle">' +
                        '                                    <span class="switcher-on"></span>' +
                        '                                    <span class="switcher-off"></span>' +
                        '                                </div>' +
                        '                            </label>' + '                        ' +
                        '                            </div>' + '                    </div>'
                    ].join('\n');
                } else {
                    // Otherwise, set the switches according to the last known preferences from the
                    // cookie
                    var checked = '';
                    if (prefs && Object.keys(prefs).indexOf(category.name) > -1) {
                        if (prefs[category.name] === true) {
                            checked = 'checked';
                        } else {
                            checked = '';
                        }
                    }

                    switcher = [
                        '<div class="block-interval-switch__checkbox">' +
                        '                        <div class="switcher ' +
                        (category.name === categories.necessary ? ' switcher_disabled' : '') +
                        '">' + '                            <label class="switcher-label">' +
                        '                                <input class="switcher-checkbox jsCookieSettingSwitcher" type="checkbox" data-name="' +
                        category.name + '" ' +
                        (category.name === categories.necessary ? 'disabled=true checked' :
                         checked) + '>' +
                        '                                <div class="switcher-circle">' +
                        '                                    <span class="switcher-on"></span>' +
                        '                                    <span class="switcher-off"></span>' +
                        '                                </div>' +
                        '                            </label>' + '                        ' +
                        '                            </div>' + '                    </div>'
                    ].join('\n');
                }

                title += [
                    '<li class="' + (index ? +'' : 'active') + '"><a href="#' + category.name +
                    '" data-toggle="r-tab">' + category.name + '</a></li>'
                ].join('\n');

                // Clear table data for each loop
                var table, tableStart, tableEnd;
                var tableData = '';

                tableStart = [
                    '<div class="settings-table">',
                    '    <table>',
                    '        <tr>',
                    '            <th>' + "Cookies Used" + '</th>',
                    '        </tr>'
                ].join('\n');

                if (category.scripts && category.scripts.length > 0) {
                    category.scripts.forEach(function (script) {
                        if (script.category === category.name) {
                            // If GTM, extract all items from the name
                            var multi = script.name.split(', ');
                            if (multi.length > 0) {
                                multi.forEach(function (item) {
                                    tableData += [
                                        '<tr>',
                                        '    <td>' + item + '</td>',
                                        '</tr>'
                                    ].join('\n');
                                })

                            } else {
                                tableData += [
                                    '<tr>',
                                    '    <td>' + script.name + '</td>',
                                    '</tr>'
                                ].join('\n');
                            }
                        }
                    })
                } else {
                    tableData += [
                        '<tr>',
                        '    <td>' + "None" + '</td>',
                        '</tr>'
                    ].join('\n');
                }

                tableEnd = [
                    '    </table>',
                    '</div>'
                ].join('\n');

                table = tableStart + tableData + tableEnd;

                description += [
                    '<div class="r-tab-pane ' + (index ? +'' : ' active') + '" id="' +
                    category.name + '"><div class="title">' + category.name + switcher + '</div>' +
                    category.description + table + '</div>'
                ];
                index++;
            });

            html = '<div class="block-cookie-setting">' + '<div class="title-category">' +
                   '            <ul class="nav nav-tabs tabs-left">' + title + '</ul>' + '</div>' +
                   '<div class="content-category">' + '    <div class="tab-content">' +
                   description + '</div>' + '</div>' + '</div>';
            html = '<div class="jsBlockCookieSettings">' + html + '</div>';

            cookieconsentBlock.prepend(html);
        }

        function readConsentSwitches() {
            var checkboxs = $('.jsCookieSettingSwitcher ');
            var consentPrefs = {};

            checkboxs.each(function (checkbox) {
                var value = $(this).prop('checked');
                var nameCategory = $(this).data('name');

                if (value) {
                    consentPrefs[nameCategory] = true;
                } else {
                    consentPrefs[nameCategory] = false;
                }
            });

            return consentPrefs;
        }

        var tabSwitchHandler = function (c) {
            c.preventDefault();

            $('.jsBlockCookieSettings [data-toggle="r-tab"]').closest('li').removeClass('active');
            $('.jsBlockCookieSettings .r-tab-pane').removeClass('active');

            var nameTab = $(this).closest('li').addClass('active').end().attr('href');

            $(nameTab).addClass('active');
        };

        $(document).on("click", '.jsBlockCookieSettings [data-toggle="r-tab"]', tabSwitchHandler);

        if (navigator.doNotTrack == '1') {
            cLog('DNT is set, we respect it');
            optOut();
            util.clearCookiesLike(/(cookieconsent_status.*?)=/);
            util.clearCookiesLike(/(consentPrefs.*?)=/);
        } else if (!window.cookieconsent) {
            // Cookie consent code not loaded, opt-out from everything just in case
            optOut();
        } else {
            $.ajax({
                url: 'https://geo.restream.io/lookup',
                type: 'GET',
                dataType: 'json',
                async: false, // TODO: Remove once we migrate to centralized analytics, then we'll need to wait before user agree or reject sending analytics data otherwise
                success: function (data) {
                    cLog(data);
                    if (data.country && (EU.indexOf(data.country) !== -1)) {
                        cLog('Country is inside EU!');

                        // If the cookie exists, we have consented already so load the results.
                        if (util.existsCookie('cookieconsent_status')) {
                            var didConsent = util.hasConsented();
                            if (didConsent) {
                                optInPrefs();
                            } else {
                                setPreferencesDecline();
                            }
                            submitConsent();
                            return;
                        }

                        // Otherwise, load the cookieconsent script on page load.
                        window.addEventListener("load", function () {
                            window.cookieconsent.initialise({
                                palette: {
                                    popup: {
                                        background: "#ffffff",
                                        text: "#000000"
                                    },
                                    button: {
                                        background: "#f85133",
                                        text: "#ffffff"
                                    }
                                },
                                showLink: true,
                                theme: "classic",
                                position: "bottom-left",
                                static: false,
                                type: "opt-in",
                                content: {
                                    message: "This website uses cookies to ensure you get the best experience on our website.",
                                    dismiss: "Decline",
                                    allow: "Allow",
                                    settings: "Settings"
                                },
                                layout: 'basic-settings',

                                // Triggers after the consent cookie was set and the page reloads.
                                onInitialise: function (status) {
                                    cLog('onInitialise');
                                },

                                // When a user changes accept / decline
                                onStatusChange: function (status, chosenBefore) {
                                    cLog('onStatusChange');

                                    var didConsent = util.hasConsented();
                                    switch (this.options.type) {
                                        case 'opt-in':
                                            if (didConsent) {
                                                // enable cookies
                                                optIn();
                                                submitConsent();
                                            } else {
                                                // Set cookies
                                                setPreferencesDecline();
                                                submitConsent();
                                            }
                                            break;
                                        case 'opt-out':
                                            if (!didConsent) {
                                                // disable cookies
                                                optOut();
                                            }
                                            break;
                                    }
                                },

                                // When a user brings up the cookie banner again (programmatically or by UI)
                                onRevokeChoice: function () {
                                    cLog('onRevokeChoice');

                                    switch (this.options.type) {
                                        case 'opt-in':
                                            // disable cookies
                                            optOut();
                                            break;
                                        case 'opt-out':
                                            // enable cookies
                                            optIn();
                                            break;
                                    }
                                },

                                // Load Cookie Config UI with this callback. It is called every time the `Settings`
                                // button is clicked.
                                onSettingsClick: function () {
                                    cLog('Settings UI Clicked');
                                    var cookieconsentBlock = $('div[aria-label="cookieconsent"]');
                                    var jsBlockCookieSettings = $('.jsBlockCookieSettings');

                                    if (jsBlockCookieSettings.length) {
                                        if (jsBlockCookieSettings.hasClass('hidden')) {
                                            jsBlockCookieSettings.removeClass('hidden');
                                            cookieconsentBlock.addClass('cookieconsent-settings');
                                        } else {
                                            jsBlockCookieSettings.addClass('hidden');
                                            cookieconsentBlock.removeClass('cookieconsent-settings');
                                        }
                                    } else {
                                        createSettingBlock(scriptArr);
                                    }
                                }
                            });
                        });
                    } else {
                        cLog('Country is outside EU!');
                        cLog('Compliance not needed, opting in all scripts ...');
                        optInAll();
                        util.clearCookiesLike(/(cookieconsent_status.*?)=/);
                        util.clearCookiesLike(/(consentPrefs.*?)=/);
                    }
                },
                error: function (err) {
                    cErr(err);
                }
            });
        }

    })();
</script>

<script>
    var currentLanguage = "english";
    var userId = null;
    var userCreateAt = null;
    var phraseAppEditorEnabled = false;
</script>

<script src = "/js/faq.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>
<script src = "/js/trackingPageView.js?version=db9e6eef2eb4f0d8c55ecc7beaf2d78d"></script>

</body>
</html>
