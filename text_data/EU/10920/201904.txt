





Privacy Policy UK


hsjQuery = window['jQuery'];









(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-NJLC3NH');






















 











  jQuery(function(){
      var $             = jQuery;
      var url           = 'http://google.com/search?q=site:' + location.protocol + '//' + location.hostname + ' ';
      var $searchModule = $('.hs-search-module.ac1dbcaa-b304-41df-9e06-aa233d63a6c8');
      var $input        = $searchModule.find('input');
      var $button       = $searchModule.find('.hs-button.primary');
      if (false) {
          $input.val(decodeURIComponent(location.pathname.split('/').join(' ').split('.').join(' ').split('-').join(' ').split('_').join('')));
      }
      $button.click(function(){
          var newUrl = url + $input.val();
          var win = window.open(newUrl, '_blank');
          if (win) {
              //Browser has allowed it to be opened
              win.focus();
          } else {
              //Browser has blocked it
              location.href = newUrl;
          }
      });
      $input.keypress(function(e){
          if (e.keyCode !== 13) return;
          e.preventDefault();
          $button.click();
      });
  });














































 











  jQuery(function(){
      var $             = jQuery;
      var url           = 'http://google.com/search?q=site:' + location.protocol + '//' + location.hostname + ' ';
      var $searchModule = $('.hs-search-module.ba61ca56-cef7-4f0e-9ce8-1989fd2b11cd');
      var $input        = $searchModule.find('input');
      var $button       = $searchModule.find('.hs-button.primary');
      if (false) {
          $input.val(decodeURIComponent(location.pathname.split('/').join(' ').split('.').join(' ').split('-').join(' ').split('_').join('')));
      }
      $button.click(function(){
          var newUrl = url + $input.val();
          var win = window.open(newUrl, '_blank');
          if (win) {
              //Browser has allowed it to be opened
              win.focus();
          } else {
              //Browser has blocked it
              location.href = newUrl;
          }
      });
      $input.keypress(function(e){
          if (e.keyCode !== 13) return;
          e.preventDefault();
          $button.click();
      });
  });


































What We Do

Our Approach
Power of Conversant

Solutions

Personalised marketing

CRM
Media Platform
Personalised Video

Ad serving
Affiliate marketing

Resources
Blog
About

In the News
Press Releases
Our Management
Partners
Careers

Publishers

Benefits
Integrations
Join Us
Login

Contact











English


Deutsch


Français






































Review Consent Preferences



$.getJSON("https://legal.conversantmedia.com/node/311?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzExfQ.ifRfwZkDys3VwBAUFMXV-O_U3D56ENP8opvats5Xra0&callback=?",function(json){
    $('#legalContainer').html(json)
}); 



































 













What we do

Our Approach
The Power of Conversant

Solutions

Personalised Marketing
Ad Serving
Affiliate Solutions

About

Blog
Resources
In the News
Press Releases
Partners
Careers
Contact us

Publishers

Benefits
Integrations
Join Us

Legal

Privacy Policy
Cookie Policy
Terms of Use
About our Ads
Modern Slavery Statement
MSA Policy for Suppliers
Review Consent Preferences












What We Do 

Overview
The Power of Conversant

How We Do It 

Overview

What We Know 

Overview
Whitepapers
Blog

Who We Are 

Overview
In the News
Partners
Press Releases
Our Locations
Contact Us

Careers
Publishers 

Overview
Benefits
Integrations
Join Us






















Let's Connect!



















Countries
Investor Relations
Login









© 2019  Conversant Europe Limited. All rights reserved.






























(function () {
    window.addEventListener('load', function () {
        setTimeout(function () {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/_hcms/perf', true /*async*/);
            xhr.setRequestHeader("Content-type", "application/json");
            xhr.onreadystatechange = function () {
                // do nothing.
            };
            var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
            function populateNetworkInfo(name, connection, info) {
                if (name in connection) {
                    info[name] = connection[name];
                }
            }
            var networkInfo = {};
            if (connection) {
                ['type', 'effectiveType', 'downlink', 'rtt'].forEach(function(name) {
                    populateNetworkInfo(name, connection, networkInfo);
                });
            }
            var perfData = {
                url: location.href,
                portal: 1771218,
                content: 5636000677,
                group: -1,
                connection: networkInfo,
                timing: performance.timing
            };
            xhr.send(JSON.stringify(perfData));
        }, 3000);  // Execute this 3 seconds after onload.
    });
})();



if (typeof hsVars !== 'undefined') { hsVars['language'] = 'en'; }





var _hsq = _hsq || [];
_hsq.push(["setContentType", "standard-page"]);
_hsq.push(["setCanonicalUrl", "https:\/\/www.conversantmedia.eu\/legal\/privacy-policy"]);
_hsq.push(["setPageId", "5636000677"]);
_hsq.push(["setContentMetadata", {
    "contentPageId": 5636000677,
    "legacyPageId": "5636000677",
    "contentFolderId": null,
    "contentGroupId": null,
    "abTestId": null,
    "languageVariantId": 5636000677,
    "languageCode": "en",
    
}]);




var hsVars = {
    ticks: 1554079435411,
    page_id: 5636000677,
    content_group_id: 0,
    portal_id: 1771218,
    app_hs_base_url: "https://app.hubspot.com",
    language: "en",
    analytics_page_type: "standard-page",
    category_id: 1,
    folder_id: 0
}






        window.cmpConfig = {
            // true/false or "https://usadmm.dotomi.com/gdpr/check/json/current" -- does GDPR consent apply to this user or not.
            // If publisher has their own consent requirement service
            // They may set this how they would like.  If they have an endpoint that
            // meets our consent_requirement endpoint They may pass a URL
            //
            summon: true,
            gdprAppliesGlobally: true,

            // url path to logo for site branding.
            // Aligned Vertical left maximum height 95px
            brandingImg: "https://www.conversantmedia.eu/hs-fs/hubfs/1.Images/logos/CNVR_LOGO_RGB_Black-01.jpg?width=250",

            // using the schema for setting consent we must redirect back to a page on the
            // same domain in order to capture consent for local vendors.  Also this URL is
            // used to redirect back to the host site when the global consent string is set or
            // gotten on the consensu.org domain.  Default is favicon.ico since most
            // all sites on the internet have one, in case it doesn't this optional parameter
            // can be passed so there are no 404s.  In reality it doesn't matter if the
            // redirected item is there or not it'll just return a 404 response and may not
            // look clean and signal a problem with the publisher/advertiser when no real
            // problem exists.
            redirectURL: "/robots.txt",

            // Either string domain name or advertiser id used to uniquely identify for
            // logging. Passed to the set consent and audit endpoints. 
            siteId: "a-conversantmedia",

            // used to load asychronous css override as the CMP UI is loaded asynchronously
            // if there are issues with CSS and the host page this would be the place to
            // fix them.  Likewise, if the publisher wanted the ability to customize their
            // CMP to the design and style of the host site they could do that here.
            // cssOverride: "assets/override.css",

            // Filter of ids from the global vendor list.  If this is not here, then
            // the entire GVL will be shown
            //vendors:[1,2,3,4,6,7,8,24],

            vendors:[
            24, /* Conversant */
            25, /* Oath */
            32, /* AppNexus */
            10, /* Index Exchange */
            52, /* Rubicon Project */
            35, /* Purch Group */
            69, /* OpenX */
            80, /* Sharethrough */
            81, /* PulsePoint */
            76, /* Pubmatic */
            77, /* comScore */
            144 /* district m */
            ],


            // default language code.  This will be the fallback.  The language will be
            // drawn from the browser's user preference initially, if it doesn't exist
            // this will be the default.
            lang : "EN",

            // If there is a mismatch between the GVL version at the publicly hosted json
            // and the GVL version stored inthe consent string, we will have to re show the
            // CMP but we don't want to do it every time the GVL is updated so we'll set
            // a minimum number of days before it'll show again.
            minShowDays: 3,

            // Number of days to bug the user again default is 13 months or 396 days this
            // is optional and should be omitted if the integration does not specifically
            // call for it.
            expiryDays: 396,

            // if they don't consent, nag them after x number of days and the default
            // is 7 days.  0 is no nag.
            nagDays: 7,

            // When the final "thank you" banner shows the default location is at the
            // You may specify that you want it to show across the top, or if no banner
            // you may pass "none". Default value is "bottom" if this is not specified. 
            // bannerPlacement:"bottom",

            // For mobile contexts.  Mobile in-app browsers have no ability to set a
            // persistant cookie, therefore the consent string will have to be passed
            // to it and comes from the native layer.  The CMP will use this if it
            // exists and not attempt to read the globally persistant cookie'd
            // consent string.
            //
            // This was made into an object in case other mobile specific settings will
            // need to be added, it's important to have a single space the CMP can look
            // for the environment configuration.
            //
            // This is optional of course and used by only in-app webviews through our
            // mobile SDK.  Regular web implementations will not need this.
            /*
            inAppConfig: {

            // passing the consent string to act on instead of the CMP getting it itself
            consentString: "AH823HOH1RU1O3RCAU"

            },
            */

            // local vendors list is any vendor who choses to implement our consent endpoint
            // and is not connected with the iab consent string.  It is highly recommended
            // that vendors integrate with the IAB EU and get on the list as that is the
            // optimal function of the CMP and singnaling consent for all members of the
            // Ad Tech ecosystem. Please try to NOT use this.
            localVendors : {

            // version to check to make sure we're up to date.
            version: "1.0.1",

            // List of providers as a hash keyed by the participant_id
            vendors: {

                // Participant object keyed by the participant_id.
                // Passed through in the api as participant_id.
                "1000":{

                // used only for the site
                isSite: true,

                // what will be displayed for the company's name
                name: "Conversant (This site)",

                // List of integers that are ids for specific processing purposes based on Consent. 
                purposeIds: [2],
                // List of integers that are ids for specific processing purposes based on Legitimate Interest. 
                legIntPurposeIds: [1,3,4,5],

                // list of critical urls, for allowing consent, disallowing consent and
                // a link to the company's privacy policy page
                urls:{
                    policyUrl: "http://www.conversantmedia.eu/legal/privacy-policy",
                    cookiesPolicy: "http://www.conversantmedia.eu/legal/privacy-policy",
                    audit: "https://usadmm.dotomi.com/gdpr/audit/current"
                },
                
                // Name of the cookie to store consent value for the site
                // only used if "isSite" equals true.  This cookie will store the
                // consent value as a boolean (Y/N)
                consentCookieName: "euconsent_site"

                },
                "3000":{

                // what will be displayed for the company's name
                name: "HubSpot",

                // List of integers that are ids for specific processing purposes.
                // we are listing them as ids so that we can swap the language.
                purposeIds: [1],
                legIntPurposeIds: [2,3,4,5],

                // list of critical urls, for allowing consent, disallowing consent and
                // a link to the company's privacy policy page
                urls:{
                    policyUrl: "https://legal.hubspot.com/privacy-policy"
                }
                },	  
                "5000":{

                // what will be displayed for the company's name
                name: "Google Analytics",

                // List of integers that are ids for specific processing purposes.
                // we are listing them as ids so that we can swap the language.
                purposeIds: [1],
                legIntPurposeIds: [2,3,4,5],

                // list of critical urls, for allowing consent, disallowing consent and
                // a link to the company's privacy policy page
                urls:{
                    policyUrl: "http://www.google.com/intl/en/policies/privacy/ "
                }
                },


                "8000":{

                // what will be displayed for the company's name
                name: "Hotjar",

                // List of integers that are ids for specific processing purposes.
                // we are listing them as ids so that we can swap the language.
                purposeIds: [1],
                legIntPurposeIds: [2,3,4,5],

                // list of critical urls, for allowing consent, disallowing consent and
                // a link to the company's privacy policy page
                urls:{
                    policyUrl: "http://www.hotjar.com/privacy "
                }
                },

                "9000":{

                    // what will be displayed for the company's name
                    name: "Facebook",

                    // List of integers that are ids for specific processing purposes.
                    // we are listing them as ids so that we can swap the language.
                    purposeIds: [1,2,3],
                    legIntPurposeIds: [4,5],

                    // list of critical urls, for allowing consent, disallowing consent and
                    // a link to the company's privacy policy page
                    urls:{
                    policyUrl: "http://en-gb.facebook.com/full_data_use_policy"
                    }
                },
                "10000":{

                    // what will be displayed for the company's name
                    name: "Wistia",

                    // List of integers that are ids for specific processing purposes.
                    // we are listing them as ids so that we can swap the language.
                    purposeIds: [1,2,3],
                    legIntPurposeIds: [4,5],

                    // list of critical urls, for allowing consent, disallowing consent and
                    // a link to the company's privacy policy page
                    urls:{
                    policyUrl: "https://wistia.com/privacy"
                    }
                }
            }
            },

            // called on different consent accept statuses in case the publisher
            // wants to take specific actions.
            // This is optional and only needs to be defined if used.
            callbacks: {

            // Place all callback functions here.  Each will be called when certain phases complete

            onCMPShow: function() {

                // Called if the CMP is shown to the user
                console.log("onCMPShow()");
            },
            onConsentAll: function() {

                // when a user consents to all vendors
                console.log("onConsentAll()");
            },
            onNoConsentAll: function() {

                // when a user consents to no vendors
                console.log("onNoConsentAll()");
            },
            onConsentSome:function() {

                // when a user consents to some and not all vendors
                console.log("onConsentSome()");
            },
            onGDPRComplete: function() {

                // when the GDPR Consent Capture is complete
                console.log("onGDPRComplete()");
            },
            onCMPDismiss: function() {

                //called when CMP is dismissed, including the banner."
                console.log("onCMPDismiss()");
            }
            }
            };



    // optional language override
    //window.cmpConfig.lang = window.navigator.userLanguage || window.navigator.language;

    // Ensure we fire tags once the user has closed the consent tool
    window.cmpConfig.callbacks.onGDPRComplete = function() {
        fireTags();
    };
    
    (function(loc){
    if(loc.indexOf("privacy-policy")>0 || loc.indexOf("cookie-policy")>0) {
        window.cmpConfig.suppress=true;
    }
    })(document.location.href);






    /**
     * Iterates over all local vendors listed in the config.js and
     * fires an event to GTM with the case sensitive name of the vendor
     **/
    function fireTags() {
        __cmp("getLocalVendorConsent", [], function( localVendorConsentsObj, success ) {
            try {
                var vendors = window.cmpConfig.localVendors.vendors;
                for (var vendor in vendors) {
                    if (vendors.hasOwnProperty(vendor)) {
                        if (localVendorConsentsObj.vendorConsents[vendor]) {
                            const vendorName = vendors[vendor].name;
                            
                            var dataObject = { 'event': vendorName };
                            if (typeof dataLayer != 'undefined'){
                                dataLayer.push(dataObject);
                            }
                        }
                    }
                }

                // Ensure hubspot tracking options are set
                if (localVendorConsentsObj.vendorConsents['3000']) {
                    // Click consent on hubspot banner
                    var acceptButton = document.getElementById('hs-eu-confirmation-button');
                    if (acceptButton) {
                        acceptButton.click();  
                    }
                }
                else {
                    // Click decline on hubspot banner
                    var declineButton = document.getElementById('hs-eu-decline-button');
                    if (declineButton) {
                        declineButton.click();
                    }
                    _hsq.push(['doNotTrack']);
                    _hsq.push(['revokeCookieConsent']);
                }
                
                // Set Wistia tracking for this user if they consent
                if (localVendorConsentsObj.vendorConsents['10000']) {
                    window._wq = window._wq || [];
                    window._wq.push(function (W) {
                        W.consent(true);
                    });
                }
                else {
                    window._wq = window._wq || [];
                    window._wq.push(function (W) {
                        W.consent(false);
                    });
                }

            }
            catch(e) {

            }
        });

        
    }
    fireTags();



