


















            window.prerenderReady = false;
            var check_googletag_ready = function() {
                //console.log("googletag", window.googletag != undefined, window.googletag);
                if (window.googletag != undefined) {
                    googletag.pubads().disableInitialLoad();
                    googletag.enableServices();                    
                } else {
                    setTimeout(check_googletag_ready, 10);
                }
            };

            setTimeout(check_googletag_ready);
        


            !function(f,b,e,v,n,t,s)
            {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
            n.callMethod.apply(n,arguments):n.queue.push(arguments)};
            if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
            n.queue=[];t=b.createElement(e);t.async=!0;
            t.src=v;s=b.getElementsByTagName(e)[0];
            s.parentNode.insertBefore(t,s)}(window, document,'script',
            'https://connect.facebook.net/en_US/fbevents.js');
            fbq('init', '1956290191319367');
            fbq('track', 'PageView');

            (function (i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                    (i[r].q = i[r].q || []).push(arguments)
                }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
            })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

            window.ga('create', 'UA-105571553-4', 'auto');

            function getParameterByName(name, url) {
                if (!url) url = window.location.href;
                name = name.replace(/[\[\]]/g, "\\$&");
                var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                    results = regex.exec(url);
                if (!results) return null;
                if (!results[2]) return '';
                return decodeURIComponent(results[2].replace(/\+/g, " "));
            }

            var action = getParameterByName("action");
            //console.log("ACTION!", action);
            if (action === "registered_google") {
                ga('send', 'event', 'Register', 'success', 'google');
            }
            if (action === "logged_in_google") {
                ga('send', 'event', 'Login', 'success', 'google');
            }
            if (action === "registered_facebook") {
                ga('send', 'event', 'Register', 'success', 'facebook');
            }
            if (action === "logged_in_facebook") {
                ga('send', 'event', 'Login', 'success', 'facebook');
            }

            function removeParam(parameter) {
                var url=document.location.href;
                var urlparts= url.split('?');

                if (urlparts.length>=2)  {
                    var urlBase=urlparts.shift(); 
                    var queryString=urlparts.join("?"); 

                    var prefix = encodeURIComponent(parameter)+'=';
                    var pars = queryString.split(/[&;]/g);
                    for (var i= pars.length; i-->0;)               
                      if (pars[i].lastIndexOf(prefix, 0)!==-1)   
                          pars.splice(i, 1);
                    url = urlBase+'?'+pars.join('&');
                    window.history.pushState('',document.title,url); // added this line to push the new url directly to url bar .
                }
                return url;
            }

            removeParam("action");
        


          (adsbygoogle = window.adsbygoogle || []).push({
            google_ad_client: "ca-pub-8131648498075630",
            enable_page_level_ads: true
          });
        










        #app {
            min-height: 750px;
            opacity: 1;
            transition: opacity 1s ease-in-out;
        }

        /* way the hell off screen */
        .scrollbar-measure {
            width: 100px;
            height: 100px;
            overflow: scroll;
            position: absolute;
            top: -9999px;
        }

        [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
            display: none !important;
        }

        #app.ng-cloak {
            opacity: 0;
            display: block !important;
        }
        



(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = 'https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.10&appId=279120312589607';
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));








 Login
 Register


 
Logout



 Watchlist 







%



                                No Items in Watchlist
                            














BTC Dominance
%


Total Market Cap





Total Volume










All Coins
ICO Calendar
Exchanges
News

Guides
Portfolio
Market OverviewNew







Coins


 ()


ICOs


 ICO



                                        No Results
                                    
















Home











CoinCodex














Active ICOs (View All)
34


Currencies



Gainers 
%


Losers 
%








CoinCodex

About Us
Contact Us
Advertising
FAQ



Menu

All Coins
ICO Calendar
News
Exchanges

Guides




New to Crypto?
 Start Here



What is CoinCodex?
Complete cryptocurrency market coverage with real-time coin prices, charts and crypto market
                            cap featuring over  coins on more than  exchanges.














CoinCodex Â© 2017. All rights reserved.


By using this site you agree to Terms of Service, Privacy Policy and Cookie Policy.






			var coincodex = {
                "rates" : {"AUD":1.2995,"BGN":1.589,"BRL":3.3102,"CAD":1.2852,"CHF":0.95669,"CNY":6.2846,"CZK":20.61,"DKK":6.0523,"EUR":0.81248,"GBP":0.71111,"HKD":7.8487,"HRK":6.0383,"HUF":253.69,"IDR":13760,"ILS":3.5262,"INR":65.01,"ISK":98.716,"JPY":106.24,"KRW":1054.5,"MXN":18.195,"MYR":3.8757,"NOK":7.8273,"NZD":1.3783,"PHP":52.026,"PLN":3.4195,"RON":3.787,"RUB":57.592,"SEK":8.3661,"SGD":1.3092,"THB":31.18,"TRY":3.9785,"ZAR":11.823,"USD":1},
                "focused" : true,
                "version" : "510",
                "all_coins_changed" : "1522793719",
                "all_buysell_coins" : {"binance":["123","456","ADA","ADX","AION","AMB","APPC","ARK","ARN","AST","BAT","BCCU","BCD","BCH","BCPT","BLZL","BNB","BNBU","BNT","BQX","BRD","BT","BTC","BTG","BTM","BTS","CDT","CHAT","CM","CND","CTR","DASH","DGD","DLT","DNT","EDO","ELC","ELF","ENG","ENJ","EOS","ETC","ETH","ETHU","EVX","FUEL","FUN","GAS","GTO","GVT","GXS","HCC","HSR","ICN","ICX","INS","IOST","IOT","IOTA","KMD","KNC","LEND","LINK","LLT","LRC","LSK","LTC","LTCU","LUN","MANA","MCO","MDA","MOD","MTH","MTL","NAV","NCASH","NEBL","NEO","NEOU","NULS","OAX","OMG","ONT","OST","PIVX","POA","POE","POWR","PPT","QLC","QSP","QTUM","QTUMU","RCN","RDN","REQ","RLC","RPX","SALT","SDT","SNGLS","SNM","SNT","STEEM","STORJ","STORM","STRAT","SUB","SYS","TNB","TNT","TRIG","TRX","USDT","VEN","VIA","VIB","VIBE","WABI","WAN","WAVES","WINGS","WPR","WTC","XEM","XLM","XMR","XRB","XRP","XVG","XZC","YOYO","YOYOW","ZEC","ZIL","ZRX"],"hitbtc":["","1ST","8BT","ACO","ACT","ADA","ADX","AE","AEON","AIR","AMB","AMM","AMP","ANT","ARCT","ARDR","ARN","ART","ATB","ATL","ATM","ATS","AUTO","AVH","AVT","AXP","B2X","BANCA","BAR","BAS","BCH","BCN","BCPT","BDG","BET","BETR","BEZ","BGG","BKB","BMC","BMH","BMT","BNT","BOS","BPTN","BQX","BTC","BTCA","BTG","BTM","BTX","BUBO","BUS","C20","CAPP","CAS","CCT","CDT","CDX","CFI","CGC","CHAT","CHP","CHSB","CL","CLD","CLOUT","CLR","CND","CNX","COSS","COV","CPAY","CPG","CPY","CRPT","CRS","CSNO","CTE","CTR","CTX","CVC","CVH","DADI","DAN","DASH","DATA","DATX","DBET","DBIX","DCN","DCT","DDF","DENT","DGB","DGD","DICE","DIM","DLT","DNT","DOGE","DOV","DRG","DRPU","DRT","DSH","EBET","EBTC","EBTCOLD","ECAT","ECH","EDG","EDO","EET","EKO","ELE","ELM","EMC","EMGO","ENG","ENJ","EOS","ERO","ERT","ETBS","ETC","ETH","ETP","EUR","EVN","EVX","EXN","FCN","FLP","FRD","FUEL","FUN","FYN","FYP","GAME","GNO","GNX","GRMD","GRPH","GUP","GVT","HAC","HAND","HDG","HGT","HIRE","HLW","HPC","HRB","HSR","HVN","ICN","ICO","ICOS","ICX","IDH","IFT","IGNIS","IHT","IML","IND","INDI","INSUR","IOTA","IPL","ITS","IXT","JNT","KBR","KICK","KMD","LA","LAT","LEND","LIFE","LOC","LRC","LSK","LTC","LUN","MAID","MANA","MCAP","MCO","MEK","MESH","MIPS","MLD","MNE","MRV","MSP","MTH","MTX","MYB","NCT","NDC","NEBL","NEO","NET","NEU","NGC","NOAH","NTO","NXC","NXT","OAX","OCN","ODN","OMG","OPT","ORME","OTN","OTX","PAY","PBKX","PCL","PING","PIX","PKT","PLBT","PLR","PLU","POE","POLL","PPC","PPT","PQT","PRE","PRG","PRO","PST","PTOY","QAU","QCN","QTUM","QVT","R","REP","RKC","RLC","RNTB","ROOTS","RPM","RVT","SAN","SBD","SBTC","SC","SCC","SCL","SENT","SETH","SHIT","SIG","SISA","SKIN","SMART","SMS","SMT","SNC","SNGLS","SNM","SNT","SOC","SPF","STAR","STEEM","STORM","STQ","STRAT","STU","STX","SUB","SUR","SWFTC","SWT","TAAS","TAU","TBT","TEL","TFL","TGT","TIME","TIO","TIX","TKN","TKR","TNT","TRAC","TRST","TRUE","TRX","UET","UGT","ULTC","USDT","UTK","UTN","UTT","VEN","VERI","VIB","VIBE","VIT","VOISE","W3C","WAVES","WAX","WEALTH","WILD","WINGS","WIZ","WLK","WMGO","WRC","WTC","WTT","XAUR","XDN","XDNCO","XEM","XLC","XLM","XMR","XRP","XTZ","XUC","XVG","YCC","YOYOW","ZAP","ZEC","ZRC","ZRX","ZSC"],"livecoin":["","ABN","ACN","ADZ","AMB","AMM","ANT","ARC","ARK","ARTE","ASAFE2","ATM","ATX","B2B","BAT","BCC","BCH","BIO","BIT","BLK","BLU","BNT","BPC","BPTN","BQX","BSD","BTA","BTB","BTC","BTS","BURST","CBR","CCRB","CDX","CHSB","CLD","CLOAK","CLPC","COV","CPC","CRBIT","CRC","CREVA","CTR","CURE","CVC","DANC","DASH","DAY","DBIX","DGB","DGD","DIBC","DIG","DIME","DMC","DMD","DOGE","DOLLAR","DTR","ECHO","ECIO","EDG","EDR","eETT","EL","EMC","ENJ","ENT","EOS","ERO","ESC","ESP","ESR","ETH","ETHOS","ETHP","EUR","EVC","FirstBlood","FLIXX","FLP","FNC","FORTYTWO","FRST","FST","FU","FUN","FUNC","GAME","GB","GNO","GNT","GOAL","GOLOS","GRS","GRX","GUP","GYC","HNC","HNR","HST","HVN","ICN","ICOS","IDH","IFAN","INCNT","INSN","IPBC","IPL","ITI","KAPU","KICK","KNC","KPL","KRB","LDC","LEO","LSK","LTC","LTT","LUNA","MAID","MCO","MCR","MGO","MLN","MNE","MNX","MOIN","MOJO","MONA","MSCN","MTCoin","MTL","NAM","NEO","NMC","NOX","NVC","NXT","OBITS","OD","OMG","ORE","OTN","OXY","PAY","PIN","PIPL","PIVX","PLBT","POST","POSW","PPC","PPT","PPY","PRES","PRG","PRO","PUT","QAU","QTUM","RBIES","RBM","REE","REP","RLC","RLT","RUR","S","SHIFT","SIB","SLR","SNGLS","SNT","SOAR","SPA","SPF","STEEM","STORJ","STRAT","SUMO","SXC","SYS","TAAS","TER","TFL","THS","TIME","TKN","TRST","TRUMP","TRX","TWC","TX","UAH","UNC","UNRC","UNY","UQC","USC","USD","VEN","VIB","VIEW","VLTC","VOISE","VOX","VRC","VRM","VRS","VSL","WAVES","wETT","WIC","WINGS","XAUR","XBT","XEM","XMR","XMS","XRC","XRL","XSN","XSPEC","YOC","ZBC","ZRX"],"kucoin":["ACAT","ACT","ADB","AGI","AION","AIX","AMB","ARN","ARY","AXP","BCD","BCH","BCPT","BHC","BNTY","BOS","BPT","BTC","BTG","BTM","CAG","CAN","CAPP","CAT","CFD","CHSB","COFI","COV","CS","CTR","CV","CVC","CXO","DADI","DASH","DAT","DBC","DEB","DENT","DGB","DNA","DRGN","DTA","EBTC","ELEC","ELF","ELIX","ENJ","EOS","ETC","ETH","ETN","EVX","EXY","FLIXX","FOTA","GAS","GAT","GLA","GVT","HAT","HAV","HKN","HPB","HSR","HST","IHT","ING","INS","IOST","ITC","J8T","JNT","KCS","KEY","KICK","KNC","LA","LEND","LOCI","LOOM","LTC","LYM","MEE","MOD","MTH","MTN","MWAT","NEBL","NEO","NULS","OCN","OMG","ONION","ONT","PARETO","PAY","PBL","PLAY","POE","POLL","POLY","POWR","PPT","PRL","PURA","QLC","QSP","QTUM","R","RDN","REQ","RHOC","RPX","SAY","SNC","SNM","SNOV","SNT","SPF","SPHTX","STK","STX","SUB","TEL","TFL","TIME","TIO","TKY","TNC","TRAC","UKG","USDT","UTK","VEN","WAX","WTC","XAS","XLR","XRB","ZIL","ZPT"],"yobit":["007","1337","2015","256","2BACCO","2GIVE","32BIT","365","404","420G","700","888","8BIT","ABY","ACES","ACID","ACLR","ACOIN","ACP","ACPR","ACRN","ADAM","ADC","ADCN","ADT","ADZ","AE","AECC","AGRI","AGT","AIB","AIR","AL","ALC","ALEX","ALIEN","ALIS","ALL","ALTC","ALTCOM","AM","AMBER","AMM","AMS","ANAL","ANTI","APT","ARB","ARBIT","ARCO","ARCT","ARCX","ARE","ARGUS","ARH","ARM","ARNA","ARPA","ARTA","ARTC","ASAFE","ASCS","ASN","AST","ASTR","ATB","ATL","ATM","ATMCHA","ATOM","AUM","AUR","AV","AXIOM","B2","B2B","B2X","B3","BA","BAB","BAC","BAM","BAN","BASH","BAT","BATL","BBCC","BBH","BBT","BCA","BCD","BCH","BCM","BCP","BCS","BDC","BEEP","BEEZ","BENJI","BERN","BEST","BGF","BHC","BIGUP","BILL","BIO","BIOB","BIOS","BIT16","BITB","BITOK","BITON","BITS","BITZ","BLAZR","BLN","BLN2","BLRY","BLU","BLUE","BLUS","BM","BMT","BNS","BNT","BOD","BOLI","BOMB","BON","BOOM","BOSON","BOSS","BOT","BOUTS","BPC","BPOK","BPTN","BRAIN","BRAT","BRDD","BRE","BRH","BRONZ","BS","BSC","BSH","BST","BSTAR","BSTK","BSTY","BTA","BTC","BTCA","BTCM","BTCO","BTCR","BTCRED","BTCRY","BTCS","BTCU","BTD","BTDOLL","BTG","BTH","BTP","BTS","BTTF","BTV","BTZ","BUB","BUCKS","BUM","BUY","BUZZ","BVC","BXT","C0C0","C2","CAB","CAG","CAID","CAM","CANN","CAPT","CARBON","CAT","CB","CBD","CBX","CC","CCB","CCC","CCT","CCX","CD","CDO","CF","CFC","CG","CHAT","CHATX","CHEMX","CHESS","CHILL","CHIP","CHOOF","CHP","CHRG","CHSB","CIN","CIRC","CJ","CJC","CKS","CL","CLAM","CLICK","CLINT","CLO","CLOAK","CLR","CLUB","CLUD","CMC","CME","CMS","CMT","CNNC","CNT","CNX","COC","COIN","COMP","CON","CONX","CORAL","CORG","COV","COVX","COX","COXST","CPC","CRAB","CRAFT","CRAVE","CRC","CRED","CREDIT","CREVA","CRIME","CRM","CRNK","CROC","CRPS","CRW","CRX","CRY","CS","CSMIC","CST","CTIC","CTIC2","CTK","CTL","CURVES","CV2","CWXT","CXT","CYC","CYG","CYP","CYT","CZECO","DALC","DASH","DASHS","DB","DBET","DBG","DBIC","DBLK","DBTC","DC","DCC","DCK","DCR","DCRE","DCT","DCYP","DEA","DEC","DECR","DEM","DES","DETH","DFT","DGB","DGCS","DGD","DGMS","DGORE","DIME","DIRT","DISK","DKC","DLC","DLISK","DLT","DMT","DOGE","DOGETH","DOTA","DOX","DPAY","DRA","DRKT","DRM","DROP","DRT","DRZ","DTCN","DTT","DUB","DUO","DUR","DUST","DUX","DVD","DXC","DXO","EA","EAGS","EBONUS","ECA","ECASH","ECCHI","ECHT","ECLI","ECN","ECO","ECOB","EDC","EDIT","EDR2","EDRC","EET","EGAME","EGC","EGG","EGO","EKO","ELCN","ELCO","ELE","ELITE","EMB","EMC","EMP","EMPC","EMT","ENAU","ENE","ENT","ENTER","EOC","EOS","EPC","EQM","EQT","EQUAL","ERR","ESC","ESP","ETC","ETCO","ETH","ETHS","ETL","ETRUST","ETZ","EUC","EURC","EUROPE","EVA","EVIL","EVN","EVO","EXB","EXIT","EXP","EXT","F16","FADE","FAITH","FAZZ","FCASH","FFC","FGZ","FIDEL","FIDGT","FIND","FIRE","FIST","FIT","FJC","FLVR","FLX","FLY","FNTB","FONZ","FOREX","FPC","FRDC","FRE","FRK","FRN","FRST","FRWC","FSN","FTO","FUNK","FURY","FUZZ","FX","GAIN","GAKH","GAME","GB","GBIT","GBT","GCC","GCR","GE","GELD","GEN","GENE","GENIUS","GEO","GER","GFL","GHS","GIFT","GIG","GIZ","GLC","GLO","GLUCK","GMCX","GML","GNO","GNT","GO","GOAT","GOD","GOON","GOT","GOTX","GP","GPU","GRAM","GRAV","GRE","GREED","GREENF","GREXIT","GRF","GROW","GSM","GSR","GSX","GSY","GT","GTFO","GUESS","GUM","GUP","HAC","HALLO","HAMS","HAND","HAWK","HAZE","HCC","HDG","HEDG","HEEL","HIFUN","HIRE","HKN","HMC","HMP","HMQ","HODL","HON","HOPE","HPC","HPS","HQX","HSP","HTC","HTML5","HVCO","HXX","HYPERX","HZT","IBANK","IBITS","ICASH","ICN","ICOB","ICON","IEC","IETH","IFLT","IFT","ILM","IMPS","IMS","IN","INC","INCP","IND","INFX","ING","INGT","INPAY","INSANE","INV","INXT","IOC","IONX","IQN","ISL","ITI","IVZ","IW","IXC","IXT","JACK","JANE","JIF","JNT","JOBS","JOCKER","JOK","JPC","JW","JWL","KARMA","KARMC","KASHH","KAT","KC","KGB","KGC","KICK","KIDS","KIN","KISS","KNGC","KOBO","KR","KRAK","KTK","KUBO","KURT","KUSH","L7S","LANA","LATX","LAZ","LBTC","LBTCX","LC","LCC","LCWP","LDM","LDOGE","LEA","LEAF","LENIN","LEPEN","LGBTQ","LGR","LHC","LHCOIN","LIF","LIMX","LINDA","LION","LIR","LITE","LIV","LIZA","LIZI","LKC","LOC","LOCX","LOOK","LOOT","LRC","LSD","LSK","LTC","LTCP","LTCR","LTCU","LTD","LTH","LTS","LUCKY","LUMI","LUN","LUNA","LUNYR","LUX","LVG","M1","MAD","MAO","MAPC","MART","MARV","MARX","MAT","MAVRO","MAX","MAY","MAZE","MBIT","MCAR","MCO","MCOIN","MCRN","MDT","MDZ","MENTAL","MERGEC","METAL","MGO","MILO","MINH","MIRO","MIS","MLITE","MLNC","MM","MMXVI","MND","MNM","MNTP","MOIN","MOJO","MONETA","MONEY","MOOND","MOTO","MPRO","MRB","MRP","MST","MTH","MTLMC3","MUE","MULTI","MUU","MVC","MVR","MXT","MYSTIC","MZI","N2O","N7","NANAS","NANOX","NAT","NAV","NBC","NBIT","NBTK","NDOGE","NEBU","NEF","NET","NETKO","NEU","NEVA","NIC","NICE","NIXON","NKA","NKC","NKT","NLC2","NLG","NMC","NMR","NOC","NODC","NODES","NODX","NOO","NOTE","NPC","NRC","NTK","NTM","NTRN","NUBIS","NUKE","NUM","NVC","NXE","NYC","NZC","OBS","OCC","OCEAN","OCOW","ODNT","OK","OLIT","OLYMP","OMA","OMC","OMG","ONEK","ONX","OP","OPAL","OPES","OPTION","ORLY","OS76","OTN","OZC","P7C","PAC","PAK","PAL","PARA","PARTY","PAY","PAYP","PCM","PEN","PEO","PEX","PEXT","PHR","PIE","PING","PINKX","PIO","PIPR","PIVX","PKB","PLANET","PLAY","PLBT","PLC","PLNC","PLU","PNC","PND","PNK","POKE","POLL","POLY","POM","PONZ2","PONZI","POPPY","POST","POSW","POWER","PPC","PPT","PRE","PRIMU","PRIX","PRM","PROC","PROFIT","PRS","PRX","PSB","PSI","PSY","PTA","PTY","PULSE","PUPA","PURE","PUTIN","PWR","PX","PXI","PXL","PYN","QBC","QTG","QTM","QTZ","R","RAC","RAD","RADI","RAI","RATIO","RBBT","RBIES","RBIT","RBT","RBY","RCN","RCX","RDD","REA","REC","REE","REQ","RH","RICE","RICHX","RID","RIDE","RING","RIO","RISE","RMS","RNC","RNTB","ROCKET","RONIN","ROS","ROYAL","RPC","RR","RSGP","RUB","RUBIT","RUC","RUP","RUPX","RUST","SAK","SAN","SANDG","SBIT","SBT","SBTC","SCAN","SCASH","SCITW","SCL","SCRPT","SCRT","SCS","SCT","SDAO","SDC","SDP","SED","SEEDS","SEL","SEN","SENT","SEV","SFE","SH","SHDW","SHELL","SHIT","SHORTY","SHREK","SHRM","SHRP","SIB","SIC","SIGT","SIGU","SIX","SJW","SKB","SKULL","SLCO","SLEEP","SLFI","SLING","SLS","SMART","SMBR","SMC","SMF","SMSR","SMT","SNC","SNM","SNRG","SNT","SOCC","SOLAR","SOLO","SOMA","SONG","SOUL","SP","SPACE","SPC","SPEC","SPEX","SPHTX","SPKTR","SPM","SPORT","SPR","SPT","SPX","SQL","SRND","SRNT","SSC","SSH","SSTC","STA","STALIN","STAR","START","STEPS","STHR","STK","STO","STONK","STORJ","STORM","STP","STRB","STRP","STS","STU","STV","STY","SUB","SUPER","SW","SWEET","SWING","SWT","SXC","SYNX","SYS","TAB","TAG","TAGR","TAJ","TAK","TAKE","TALK","TAM","TAO","TAP","TAXI","TB","TBCX","TBX","TCN","TCR","TCX","TDFB","TDS","TEAM","TEC","TECH","TEK","TELL","TENNET","TES","TFL","TGS","THOM","TIA","TIDE","TIE","TIME","TIT","TKN","TKT","TKTX","TLE","TLEX","TLOSH","TLX","TMRW","TNG","TNS","TNT","TODAY","TOKC","TOKEN","TOOL","TORQ","TOT","TP1","TPG","TRA","TRANSF","TRAP","TRICK","TRNC","TRON","TRUMP","TRX","TSE","TTC","TUR","TWERK","TWIST","TWO","TX","U","UAE","UBIQ","UBTC","UCASH","UDOWN","UFR","UIS","UKG","UMC","UNF","UNI","UNIFY","UNIT","UNITS","URC","URO","USC","USD","USDE","UST","UTLE","UXC","VAL","VAPOR","VCOIN","VEC","VEC2","VEG","VEGA","VENE","VERS","VIA","VIDZ","VIP","VISIO","VK","VLT","VNTX","VOL","VOLT","VOYA","VPN","VPRC","VRP","VSLICE","VTC","VTL","VTN","VTX","VTY","VULC","VVI","WAM","WARP","WASH","WAVES","WAY","WBB","WCASH","WEALTH","WEEK","WGO","WGR","WHO","WIC","WINE","WINK","WISC","WISH","WITCH","WMC","WOK","WOMEN","WRC","WRT","WTT","X2","XAU","XAV","XBS","XBTC21","XBTS","XBU","XBY","XCE","XCO","XCRE","XDB","XDE","XDE2","XEM","XFCX","XGTC","XHI","XIN","XIOS","XJO","XLTCG","XMG","XMINE","XMS","XMT","XNG","XNM","XNX","XOC","XPC","XPD","XPO","XPRO","XPS","XPTX","XPY","XQN","XRA","XRL","XSP","XSSX","XSY","XT","XTR","XUP","XVE","XVG","XVS","YAC","YAY","YES","YMC","YOB2X","YOVI","YRX","ZEC","ZECD","ZEIT","ZENI","ZET","ZET2","ZIRK","ZLQ","ZMC","ZNE","ZONTO","ZOOM","ZRC","ZUR","ZYD"],"bibox":["ABT","ACAT","AIDOC","AMM","AWR","BBN","BCH","BIX","BLT","BOT","BTC","BTM","BTO","C20","CAG","CATT","CMT","CPC","CZR","DAI","DASH","DTA","DXT","EDU","ELF","EOS","ETC","ETH","FSN","GNX","GTC","GTO","HPB","IPSX","ITC","JNT","KEY","KICK","LEDU","LEND","LGO","LTC","MANA","MED","MKR","MOT","NEO","NPER","PRA","PRO","PXS","QTUM","RDN","SBTC","SHOW","SNOV","SXUT","TNB","TNC","TRX","USDT","UUU","WAX"],"changenow":["ETH","ETC","BTG","BTC","BCH","LTC","XRP","XMR","ADA"]},
                "blocking_ads" : "unknown",
                "is_mobile" : false,
                "has_focus" : true
            };
            console.info("version", coincodex.version);

            setInterval(function() {
                coincodex.has_focus = document.hasFocus();
            }, 1000);

            (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) coincodex.is_mobile = true;})(navigator.userAgent||navigator.vendor||window.opera);

            window.onfocus = function() {
                coincodex.focused = true;
            };

            window.onblur = function() {
                //coincodex.focused = false;
            };
/*
 * FuckAdBlock 3.2.1
 * Copyright (c) 2015 Valentin Allaire <valentin.allaire@sitexw.fr>
 * Released under the MIT license
 * https://github.com/sitexw/FuckAdBlock
 */

(function(window) {
    var FuckAdBlock = function(options) {
        this._options = {
            checkOnLoad:        false,
            resetOnEnd:         false,
            loopCheckTime:      50,
            loopMaxNumber:      5,
            baitClass:          'pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links',
            baitStyle:          'width: 1px !important; height: 1px !important; position: absolute !important; left: -10000px !important; top: -1000px !important;',
            debug:              false
        };
        this._var = {
            version:            '3.2.1',
            bait:               null,
            checking:           false,
            loop:               null,
            loopNumber:         0,
            event:              { detected: [], notDetected: [] }
        };
        if(options !== undefined) {
            this.setOption(options);
        }
        var self = this;
        var eventCallback = function() {
            setTimeout(function() {
                if(self._options.checkOnLoad === true) {
                    if(self._options.debug === true) {
                        self._log('onload->eventCallback', 'A check loading is launched');
                    }
                    if(self._var.bait === null) {
                        self._creatBait();
                    }
                    setTimeout(function() {
                        self.check();
                    }, 1);
                }
            }, 1);
        };
        if(window.addEventListener !== undefined) {
            window.addEventListener('load', eventCallback, false);
        } else {
            window.attachEvent('onload', eventCallback);
        }
    };
    FuckAdBlock.prototype._options = null;
    FuckAdBlock.prototype._var = null;
    FuckAdBlock.prototype._bait = null;
    
    FuckAdBlock.prototype._log = function(method, message) {
        console.log('[FuckAdBlock]['+method+'] '+message);
    };
    
    FuckAdBlock.prototype.setOption = function(options, value) {
        if(value !== undefined) {
            var key = options;
            options = {};
            options[key] = value;
        }
        for(var option in options) {
            this._options[option] = options[option];
            if(this._options.debug === true) {
                this._log('setOption', 'The option "'+option+'" he was assigned to "'+options[option]+'"');
            }
        }
        return this;
    };
    
    FuckAdBlock.prototype._creatBait = function() {
        var bait = document.createElement('div');
            bait.setAttribute('class', this._options.baitClass);
            bait.setAttribute('style', this._options.baitStyle);
        this._var.bait = window.document.body.appendChild(bait);
        
        this._var.bait.offsetParent;
        this._var.bait.offsetHeight;
        this._var.bait.offsetLeft;
        this._var.bait.offsetTop;
        this._var.bait.offsetWidth;
        this._var.bait.clientHeight;
        this._var.bait.clientWidth;
        
        if(this._options.debug === true) {
            this._log('_creatBait', 'Bait has been created');
        }
    };
    FuckAdBlock.prototype._destroyBait = function() {
        window.document.body.removeChild(this._var.bait);
        this._var.bait = null;
        
        if(this._options.debug === true) {
            this._log('_destroyBait', 'Bait has been removed');
        }
    };
    
    FuckAdBlock.prototype.check = function(loop) {
        if(loop === undefined) {
            loop = true;
        }
        
        if(this._options.debug === true) {
            this._log('check', 'An audit was requested '+(loop===true?'with a':'without')+' loop');
        }
        
        if(this._var.checking === true) {
            if(this._options.debug === true) {
                this._log('check', 'A check was canceled because there is already an ongoing');
            }
            return false;
        }
        this._var.checking = true;
        
        if(this._var.bait === null) {
            this._creatBait();
        }
        
        var self = this;
        this._var.loopNumber = 0;
        if(loop === true) {
            this._var.loop = setInterval(function() {
                self._checkBait(loop);
            }, this._options.loopCheckTime);
        }
        setTimeout(function() {
            self._checkBait(loop);
        }, 1);
        if(this._options.debug === true) {
            this._log('check', 'A check is in progress ...');
        }
        
        return true;
    };
    FuckAdBlock.prototype._checkBait = function(loop) {
        var detected = false;
        
        if(this._var.bait === null) {
            this._creatBait();
        }
        
        if(window.document.body.getAttribute('abp') !== null
        || this._var.bait.offsetParent === null
        || this._var.bait.offsetHeight == 0
        || this._var.bait.offsetLeft == 0
        || this._var.bait.offsetTop == 0
        || this._var.bait.offsetWidth == 0
        || this._var.bait.clientHeight == 0
        || this._var.bait.clientWidth == 0) {
            detected = true;
        }
        if(window.getComputedStyle !== undefined) {
            var baitTemp = window.getComputedStyle(this._var.bait, null);
            if(baitTemp && (baitTemp.getPropertyValue('display') == 'none' || baitTemp.getPropertyValue('visibility') == 'hidden')) {
                detected = true;
            }
        }
        
        if(this._options.debug === true) {
            this._log('_checkBait', 'A check ('+(this._var.loopNumber+1)+'/'+this._options.loopMaxNumber+' ~'+(1+this._var.loopNumber*this._options.loopCheckTime)+'ms) was conducted and detection is '+(detected===true?'positive':'negative'));
        }
        
        if(loop === true) {
            this._var.loopNumber++;
            if(this._var.loopNumber >= this._options.loopMaxNumber) {
                this._stopLoop();
            }
        }
        
        if(detected === true) {
            this._stopLoop();
            this._destroyBait();
            this.emitEvent(true);
            if(loop === true) {
                this._var.checking = false;
            }
        } else if(this._var.loop === null || loop === false) {
            this._destroyBait();
            this.emitEvent(false);
            if(loop === true) {
                this._var.checking = false;
            }
        }
    };
    FuckAdBlock.prototype._stopLoop = function(detected) {
        clearInterval(this._var.loop);
        this._var.loop = null;
        this._var.loopNumber = 0;
        
        if(this._options.debug === true) {
            this._log('_stopLoop', 'A loop has been stopped');
        }
    };
    FuckAdBlock.prototype.emitEvent = function(detected) {
        if(this._options.debug === true) {
            this._log('emitEvent', 'An event with a '+(detected===true?'positive':'negative')+' detection was called');
        }
        
        var fns = this._var.event[(detected===true?'detected':'notDetected')];
        for(var i in fns) {
            if(this._options.debug === true) {
                this._log('emitEvent', 'Call function '+(parseInt(i)+1)+'/'+fns.length);
            }
            if(fns.hasOwnProperty(i)) {
                fns[i]();
            }
        }
        if(this._options.resetOnEnd === true) {
            this.clearEvent();
        }
        return this;
    };
    FuckAdBlock.prototype.clearEvent = function() {
        this._var.event.detected = [];
        this._var.event.notDetected = [];
        
        if(this._options.debug === true) {
            this._log('clearEvent', 'The event list has been cleared');
        }
    };
    FuckAdBlock.prototype.on = function(detected, fn) {
        this._var.event[(detected===true?'detected':'notDetected')].push(fn);
        if(this._options.debug === true) {
            this._log('on', 'A type of event "'+(detected===true?'detected':'notDetected')+'" was added');
        }
        
        return this;
    };
    FuckAdBlock.prototype.onDetected = function(fn) {
        return this.on(true, fn);
    };
    FuckAdBlock.prototype.onNotDetected = function(fn) {
        return this.on(false, fn);
    };
    window.FuckAdBlock = FuckAdBlock;
    
    if(window.fuckAdBlock === undefined) {
        window.fuckAdBlock = new FuckAdBlock({
            checkOnLoad: true,
            resetOnEnd: true
        });
    }
})(window);

fuckAdBlock.setOption("loopMaxNumber", 10);

fuckAdBlock.on(true, function() {
    coincodex.blocking_ads = true;

    console.log("blocking_ads");
    localStorage.setItem('puppy_killer', true);
});

fuckAdBlock.onNotDetected(function() {
    console.log("not blocking_ads");
    localStorage.setItem('puppy_killer', false);
    coincodex.blocking_ads = false;
});

fuckAdBlock.check(true);


















            angular.module('lib', []);
            angular.module('lib').filter("emptyToEnd", function () {
                return function (array, key) {
                    if(!angular.isArray(array)) return;
                    var present = array.filter(function (item) {
                        return item[key] || item[key] === 0;
                    });
                    var empty = array.filter(function (item) {
                        return !item[key] &&Â item[key] !== 0;
                    });
                    return present.concat(empty);
                };
            });

            angular.module("CoinCodex", ["ngRoute", "ngAnimate", "angularMoment", "mgcrea.ngStrap", "lib"]);
        































            setTimeout(function() {
                // https://davidwalsh.name/detect-scrollbar-width
                // Create the measurement node
                var scrollDiv = document.createElement("div");
                scrollDiv.className = "scrollbar-measure";
                document.body.appendChild(scrollDiv);

                // Get the scrollbar width
                var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                //console.warn("scrollbarWidth", scrollbarWidth); // Mac:  15

                // Delete the DIV 
                document.body.removeChild(scrollDiv);

                //https://stackoverflow.com/questions/1409225/changing-a-css-rule-set-from-javascript
                function getCSSRule(ruleName) {
                    ruleName = ruleName.toLowerCase();
                    var result = null;
                    var find = Array.prototype.find;

                    find.call(document.styleSheets, styleSheet => {
                        result = find.call(styleSheet.cssRules, cssRule => {
                            return cssRule instanceof CSSStyleRule 
                                && cssRule.selectorText.toLowerCase() == ruleName;
                        });
                        return result != null;
                    });
                    return result;
                }

                getCSSRule('.modal-open').style["margin-right"] = scrollbarWidth + "px"; 
            }, 100);
        


